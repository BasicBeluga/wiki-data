
Az utasok és a rakományok szétosztása korábban a CargoDist nevű patch használatával volt lehetséges. A patch 2013. júniusától az OpenTTD [[hu/Nightly|nightly]], majd a 2013. karácsonyán kiadott 1.4.0 béta verziója részévé vált, így a [[hu/Haladó beállítok|Haladó beállítások]] használatával elérhető az a lehetőség, hogy a játék az utasok, a levelek és minden más rakomány számára célállomást határozzon meg. A rakomány csak a célállomása felé tartó járműre kerül fel.



==Áttekintés==

A klasszikus OpenTTD-ben nehéz az állomáson felhalmozódó rakományt szétosztani több állomás közt: vagy több járművet kell használni eltérő utasításlistával, vagy bonyolult utasításlistát kell összeállítani.

Tegyük fel, hogy van egy vonatunk, mely "A" és "B" város közt ingázik. A vasútállomáshoz mindkét városban több buszmegállóból álló buszhálózat kapcsolódik. Szándékod szerint az utasok "A" város bármely buszmegállójából utazhatnának "B" város bármely buszmegállójáig, és viszont. Az OpenTTD hagyományos használatával "A" városban buszokkal szállíthatod az utasokat a vasútállomásra, ahol aztán egy vonat veszi fel őket és szállítja tovább "B" város vasútállomására, ahol pedig "B" város buszai osztják szét őket a buszmegállók közt úgy, hogy a vasútállomás és az egyes buszmegállók közt csillag formában oda-vissza ingáznak. Minden egyes jármű utasításlistája "Elszállítás és üresen indulás" utasítást tartalmaz, a kiegészítő útvonalakon bonyolultabb utasításlista is használható. Ez a megoldás még nem teszi lehetővé, hogy az utasok A-ból B-be akarjanak jutni, vagy az egyik város valamelyik vasútállomására vagy valamelyik buszmegállójába. Minél több állomást és járművet adsz hozzá, annál bonyolultabb és nehézkesebb rendszert eredményez.

A '''rakományok szétosztása''' automatikusan gondoskodik az elszállításról, és kiválasztja az érintett utasok célállomását. A fenti példában nem kell egyetlen "Elszállítás és üresen indulás" utasítást sem meghatároznod, és nem kell csillag formájú buszhálózatot sem összeállítanod. Az utasok tudják, hová utaznak és melyik járműre szálljanak fel, elképzelhető, hogy emiatt több várakozó utast találsz az állomásokon.

A rakomány szétosztására választott CargoDist mellett más patch-ek is hasonló hatást próbálnak elérni. A [[hu/Cargodest|Cargod'''e'''st]]-tel szemben a CargoDist az rakomány útvonalának meghatározását és a különböző útvonalak terhelésének kiegyensúlyozását együtt oldja meg, a szállítási igényt pedig ezek előfeltételeként kezeli. A [http://www.tt-forums.net/viewtopic.php?f=33&t=54253 YACD]-től pedig abban tér el a CargoDist hogy elérhető úticélokat vesz figyelembe, nem pedig az egész terepet, másfelől pedig -- a számítógép teljesítményére tekintettel -- a teljes útvonal-rendszert külön szálon előszámítja.

Az [http://www.tt-forums.net/viewtopic.php?f=33&t=41992&start=0 angol nyelvű fórum-topikban] további tájékoztatás olvasható. Ha a rakomány szétosztásához kapcsolódóan további kérdéseid lennének, tedd ott fel bátran.


==Működési módok==
[[File:en/Manual/Cargodist-overlays.png|frame|Rakományáramlási térkép és jelmagyarázat]]
[[File:en/Manual/Cargodist-station.png|frame|Megváltozott állomás-ablak]]

A CardoDist-tel az utasok és a rakományok szétosztására három módot kapsz. A Haladó beállításoknál meghatározhatod, hogy a rakomány különböző típusaira melyiket akarod alkalmazni. 
* A '''kézi''' szétosztás azt jelenti, hogy nincs automatikus szétosztás, tehát a játék úgy működik, mint a CargoDist nélkül.
* A '''szimmetrikus''' szétosztással az algoritmus két célállomás közt azonos mértékben próbálja meg szétosztani a rakományt. Ez nem mindig sikerül. Ha van olyan állomás, ahol több utas gyűlik össze, mint a szóba jöhető többi állomáson összesen, azokra nyilván nem osztható szét a rakomány egyenletesen. Az algoritmus következetességét befolyásolhatod a ''Szimmetrikus esetben a visszatérő rakomány mennyisége'' opció beállításával. Ha 100%-nál kisebbre állítod, az egyik irányba kevesebb rakomány indul, mint a másik irányba.
* Az ''aszimmetrikus'' szétosztással ilyen korlátozások nélkül kerül a rakomány szétosztásra.

==Extensions to the smallmap and main viewport==

A rakomány áramlásának áttekintéséhez úgy a főablak, mint a világtérkép segítséget nyújt az állomások és szállítási kapcsolatok feltüntetésével. A kapcsolatok vonalként jelennek meg a szállítási útvonal kapacitásától függő színekkel. A sárga és a vörös akkor jelenik meg, ha a rakomány szétosztását az adott rakományra engedélyeztük, és a rakományáramlás-számítás szerint a szállítható rakományhoz túl kicsi a szállítási kapacitás az adott viszonylatban. A fehér és a világoszöld azt jelzi, hogy a szállítható rakományra túl nagy a szállítási kapacitás. Ilyen esetben néhány járművet kivonhatsz a forgalomból, vagy meg lehet határozni olyan szállítási kapcsolatot is, hogy a járművek a rakomány célba juttatása után üresen térjenek vissza. 

Az állomásokat a cég színének megfelelő színű négyzetek jelölik. Minél több utas vagy rakomány érkezik az állomásra vagy termelődik ott, annál nagyobb a négyzet. A főablak rakományáramlási magyarázata a '''Térkép''' menüből nyitható meg. Kijelölheted, hogy a főablak melyik játékosok milyen rakományainak kapcsolatát jelenítse meg. A rakományáramlási világtérkép csak a saját cég kapcsolatait mutatja. A menüben új almenü szolgál a megjelenítendő rakomány kiválasztására.

==A rakományablak kiterjesztése==
The station GUI shows the sources, next hops and estimated destinations of the cargo waiting as well as those of the planned cargo flows through the station. Final destinations are only estimated. Don't expect each packet of cargo to go exactly that way. Cargo packets are never split for routing but they may be split to fit into vehicles of different sizes. That means it would be very hard to give the exact numbers here. In the long run everything is still sent to the proper destinations, though.

You can group the cargo by source station, next hop and destination in any order with the "Group by" drop down in the top menu. The subgroups are opened and closed by clicking the little "+" and "-" buttons at the end of the line. You can sort entries within the groups and subgroups by the station they represent or by the amount of cargo displayed. The dropdown above the one for grouping order combines the selection of sort criteria with the selection of mode to be shown (planned or waiting cargo).

==Advanced settings==

When switching on automatic distribution for some cargo it will take a few game days until the cargo is actually distributed. This is because the distribution is periodically calculated and the effect can only be seen after the first calculation. The calculation is done based on link graphs. A link graph is a connected component for one cargo in your network. In the introductory example all stations in the towns A and B would form one link graph. If there is another bus network in a town C which isn't connected to A or B then that forms a different link graph. The more link graphs exist in a game the longer it takes until all of them are calculated.

You can influence how often a new link graph calculation shall be started and how much time to allow for each calculation with the respective settings in the "Cargo Distribution" group of the advanced settings. Indirectly this determines the maximum number of link graphs to calculated in parallel at any time. Link graph calculations are done in separate threads, decoupled from the main game. Those threads are joined at predefined times to maintain network synchronization. For most games on most computers both the interval and the time settings can be decreased quite a bit to reduce the delay between changes to orders and reactions of the link graph. If you set them too low, the game will periodically "hang" while waiting for some link graph calculation thread to finish, though. The default settings are tailored to extremely large games on slow computers so that this never happens. There is another setting which determines the accuracy of link graph calculations. The more accurate the calculation the longer it takes to finish. If you change it you should balance it against the "time" setting.

The setting for the effect of distance on demands determines how much more cargo is sent to nearby stations than to far away stations. You probably don't want to change the short path saturation settings, except for debugging purposes.

==Limitations==

Cargodist currently doesn't take some orders with "unload all", "transfer", "no unloading" or "no loading" attributes into account when building the link graph. It does handle any order with a "leave empty" attribute somewhat adequately and it understands any "go via" order (by ignoring it). Any other combinations of "unload all", "transfer", "no unloading" or "no loading" may lead to cargo being planned for loading or unloading at the station referred to by the order even though that is in fact impossible as the respective vehicles are unable to do so with their current orders. It is possible to handle those orders correctly within the current architecture of the link graph. However, as that would be a rather large project on its own and the effect on gameplay is small there is no implementation for that, yet.

Conditional orders are problematic by definition. You can create an [http://en.wikipedia.org/wiki/Undecidable_problem undecidable problem] for the link graph creation algorithm by having a vehicle's orders depend on load percentage. The shape of the link graph determines which cargo a vehicle will load. The cargo loaded then determines which way it goes and that in turn determines the shape of the link graph. Some of the other conditions' outcomes are very hard to predict in advance without simulating the whole game up to the point when they are to be evaluated normally. The link graph creation and cargo routing algorithms handle that pragmatically and assume that most conditions will just yield the same result when they are evaluated for link graph creation or cargo loading and for vehicle routing. This does not work for load percentage conditions that have to be evaluated in order to decide which cargo to load. Those are evaluated based on cargo available at the station where the vehicle is loading. The condition is evaluated so that the vehicle can load the most cargo available at the station when assumed to take the same decision about the conditional order later on. An example for a problematic order configuration is this:

 Go to LOADING STATION
 Go to DROP1
 If load percentage equals 0 go to LOADING STATION
 Go to DROP2
 If load percentage equals 0 go to LOADING STATION
 Go to DROP3

It's a nice idea but obviously any vehicle following those orders could either decide to transfer all its cargo at DROP1 and return to LOADING STATION or it could keep the cargo going via DROP2 and go on. Both is correct. Thus, if you construct order systems like that, you'll see a lot of random and seemingly pointless loading and unloading at DROP1 and DROP2 as vehicles can't decide what to do.