[[Translation:en/Archive/Compilation and Ports/Compiling on GNUâˆ•Linux and ðŸŸ‰BSD]]
[[Category:en/Development/Compiling OpenTTD]]

A quick guide to get started with OpenTTD development on Linux.

==Required software==

Most packages that are required for development (Like GCC) should already be installed on your box. You will require these packages in addition to GCC, make and the usual build tools.
Beside those, OpenTTD requires the SDL development libraries to be installed. Optionally, but extremely recommended is install zlib development files, which compresses savegames (not having this doesn't just make your games bigger, but also makes you unable to load compressed savegames or join network games with compression, ie all network games).
Lastly, OpenTTD can use the libpng development files to produce screenshots in PNG instead of BMP.

Furthermore, if you want to be as up to date as you can be, you should install the subversion client to access the latest code in our subversion repository.

=== Mandriva 2006 & 2007 ===

'''1. Required Packages'''

These packages are required in Mandriva Linux 2006 / 2007
* '''libSDL1.2-devel''' (+ dependencies)
* '''subversion''' (+ dependencies), these packages are in '''contrib''' repository
* '''TiMidity++''' (+ dependencies), if you want play the original TTD midi music
and maybe also package
* '''libsvn_ra_svn1_0''' (+ dependencies), these packages are in '''contrib''' repository
''files in libsvn_* are already included in newer version of subversion packages''

'''2. Packages Installation'''

<pre>root# urpmi libSDL1.2-devel
root# urpmi subversion
root# urpmi timidity-instruments
and maybe
root# urpmi libsvn_ra_svn1_0</pre>
or all these packages on one line
<pre>
root# urpmi libSDL1.2-devel subversion TiMidity++
</pre>

'''3. Mandriva repositories'''

To prevent depency hell, add both mandriva linux '''main''' and '''contrib''' repository, or update these using commandline
<pre>root# urpmi.update -a</pre>
before installing required packages.

''--88.146.176.22 00:24, 26 August 2006 (CEST) morpheus''

=== Debian and Ubuntu ===
* build-essential (for compilers)
* libsdl1.2-dev (required)
* dpatch (required for at least 0.4.8)
* zlib1g-dev (recommended, for savegame compression)
* libpng12-dev (optional, for PNG screenshots)
* subversion (optional, for getting the latest source)
* timidity (optional, for playing the music)

Or enter the command:
 sudo aptitude install build-essential libsdl1.2-dev subversion zlib1g-dev timidity dpatch

=== Fedora Core === 
(tested on FC6 and Fedora 7)
(not tested on FC8)
* gcc
* gcc-c++
* SDL-devel
* zlib-devel
* subversion (optional, for getting the latest source)
* timidity++ (optional, for soundtrack)
* esound (optional, for soundtrack)

Alternatively, if you have yum installed, issue the following command as root:
* yum install gcc gcc-c++ SDL-devel zlib-devel subversion timidity++ esound -y

=== SuSE 10.1 ===

From YaST:
* gcc
* gcc-c++
* SDL-devel
* zlib-devel
* libpng-devel
* subversion
* timidity

You can install in a manner near identical to the apt method above for debian if you have:

apt (if you installed apt4rpm from:
ftp://ftp.gwdg.de/linux/suse/apt/SuSE/10.1-i386/RPMS.base/apt-0.5.15cnc7-24.i586.rpm
and the libs from:
ftp://ftp.gwdg.de/linux/suse/apt/SuSE/10.1-i386/RPMS.base/apt-libs-0.5.15cnc7-24.i586.rpm
by issuing the following command at the terminal:
* apt-get install gcc gcc-c++ SDL-devel zlib-devel libpng-devel subversion timidity++

If this does not immediately work, try editing your /etc/apt/sources.list file with root and
adding "packman suser-guru" to the end of the lines starting with "rpm"

Then, again as root, issue the following commands in order:
* apt-get update
* apt --no-checksig install rpmkeys* -y

=== SuSE 10.2 ===
I don't believe the apt tool is used anymore on opensuse 10.2. Either use YaST to download:
* gcc
* gcc-c++
* SDL-devel
* zlib-devel
* libpng-devel
* subversion
* timidity

alternatively, the console tool is known as rug. You may be able to get away with:
* rug install gcc gcc-c++ SDL-devel zlib-devel libpng-devel subversion timidity

or if you have smart installed (see http://opensuse-community.org/Package_Sources/10.2#Via_Smart):
*smart install gcc gcc-c++ SDL-devel zlib-devel libpng-devel subversion timidity

The easiest way to set up smart is as follows, download the following from Guru's repository:
http://ftp.gwdg.de/pub/linux/misc/suser-guru/rpm/10.2/RPMS/i686/smart-0.51-9.guru.suse102.i686.rpm
Download it to your desktop.
login as root (in a terminal, type "su" followed by your root password)
Browse to your desktop ("cd /home/username/Desktop")
Install the rpm ("rpm -Uhv smart-0.51-9.guru.suse102.i686.rpm")
Type smart, and and answer "Y" to all the repositories. This just saves you having to add them manually when you use Guru's version.

=== Gentoo ===

As root run
 emerge --onlydeps openttd
and it will install all of openttd depencies.

If you want to use the most current version (aka TRUNK/SVN), run the following, again as root:
 emerge subversion

== Getting the source ==
=== Releases ===
You can download the .tar.gz source files from the [http://www.openttd.org/downloads.php OpenTTD website]. Extracting tarball will give you a directory called openttd-<version>, where <version> is the version you downloaded. Enter this directory, and you're ready to proceed to step 3.
=== Nightly builds ===
Similar to the release option above, you can download the latest source snapshot (made every day at 1900 GMT) from the [http://www.openttd.org/nightly.php OpenTTD website]. Unpack and enter the directory in which it is unpacked. Now, proceed to step 3.

=== Most current version (aka Trunk/SVN) ===
The most current version of the official code is stored in our subversion repository. Subversion makes it easy to track various versions and provides an easily shareable single location for our code. For you as a user this means you can quickly get the newest sourcecode.

==== Initial download ====

To obtain the source code from the subversion server type:

<code>$ svn co svn://svn.openttd.org/trunk openttd</code>

from command line to dump the code into the directory 'openttd'. We will refer to this directory as you "working copy" from now on. Also, all svn commands given from now on assume your working directory is the 'openttd' directory.

You can now skip to step 3 if you just want to compile the latest version.

==== Updating ====

If you have previously downloaded the code and a new version is available (iow, new revisions have been committed), you can update your working copy to the latest version. Inside your working copy run the following:

<code>$ svn update</code>

Or, if you don't only want to update but also want to see what has changed, run our script that lists the changes:

<code>$ ./svnup.sh</code>

Also, if you have made any local changes to the source, these will be preserved and merged with changes in svn. If a conflict between the changes occurs, it will be flagged as conflicted (Marked "C" in <code>svn status</code>) (still preserving your local changes). For more information about resolving conflicts, look at the svnbook at [http://subversion.tigris.org].

====Creating a patch file====

If you have made changes to your source that you want to share or upload as a patch, you can ask svn to generate a diff file.
The command

<code>$ svn diff > mypatch.diff</code>

creates a diff file (also referred to as "patch") which you can submit to the developers to share your improvements.

====Reverting====

You can undo changes to a file with:

<code>$svn revert filename</code>

or to your entire working directory with:

<code>$svn revert -R .</code>

==== Applying a patch ====

To apply a patch (diff file) to the source code, update your source code to the patch file's revision. Let's say the patch file has been made on r1234. You can see this in the first lines of the patch:
<code>
 Index: foo.c
 ===================================================================
 --- foo.c (revision 1234)
 +++ foo.c (working copy)
 </code>
To update your source code to r1234, type

<code>$ svn up -r 1234</code>

Then you're ready to merge the patch file

<code>$ patch -p0 < mydiff.dif</code>

Now (optionally) update the source code to the newest revision with

<code>$ svn up</code>

If this produces conflicts (files marked with "C"), though luck, the patch doesn't work for the latest revision (you can always revert and retry the patching, skipping this last step and playing an older version).

==Compiling and running==

Compile OpenTTD with:

<code>$ ./configure</code>

This will create a Makefile, then:

<code>$ make</code>

If you have changed files or updated your source, this will only recompile modified code.

== Required data files ==

Copy the following files from the WINDOWS version of Transport Tycoon Deluxe to data/
*sample.cat
*trg1r.grf
*trgcr.grf
*trghr.grf
*trgir.grf
*trgtr.grf

== Running ==
You can run with:

<code>$ ./openttd</code>

Also, you can install the game in /usr/local/ or somewhere else, but this is mainly for packagers. This requires some more in-depth knowledge about installing software and openttd, so look in the Makefile for hints.

== Playing the soundtrack==

If you want the original TTD music you need to copy the whole gm/ directory from Windows. Additionally the TiMidity program is required:

*TiMidity++-2.12.0-0.pre1.4mdk (+ dependencies) (Or something like this, for rpm based distros, can anyone check this?)
*timidity and freepats packages (For Debian and Ubuntu) (<code>$ sudo aptitude install timidity freepats</code>)
* On Fedora Core 5, install timidity++ (<code># yum install timidity++</code>). Timidity wants to talk to ESD, so you will need to "enable software sound mixing (ESD)" (System &rarr; Preferences &rarr; Sound).

To run OpenTTD with music support type

<code>$ ./openttd -m extmidi</code>

(On Fedora Core and Ubuntu, the soundtrack is played even without specifying <code>-m extmidi</code>.)

== Debian package ==
You should be able to build a debian package from the latest source using the supplied debian directory. You can replace step 3 by this. This debian directory is, conforming to openttd standards, put inside the os directory and needs to be moved a level up first:

<code>$ mv os/debian .</code>

After that, use normal debian tools to build the package:

<code>$ dpkg-buildpackage -rfakeroot -uc -us</code>

Installing can then be done by executing (as root):
<code>$ dpkg -i ../openttd-<version>_<something>.deb</code>

You now have openttd installed. 

In step 3 you need to copy the datafiles to /usr/share/games/openttd/data, since they are not included in the .deb due to licensing issues.

Instead of running openttd as ./openttd, you can just type "openttd" to start it.

In step 5, you need to copy the music files from the gm directory into /usr/share/games/openttd.