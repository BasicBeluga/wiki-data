[[Translation:en/Archive/Compilation and Ports/Compiling on Windows using MinGW]]
==Introduction==
This page contains guidelines for compiling OpenTTD in Win32 with '''MinGW'''.

==List of packages==
This tutorial has been tested with the following versions of the required packages:

* OpenTTD trunk at revision r20783.
* [http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst/mingw-get-inst-20100909/mingw-get-inst-20100909.exe/download mingw-get-inst-20100909]
* [http://alagazam.net/svn-1.6.12/svn-win32-1.6.12.zip Subversion 1.6.12]
* [http://zlib.net/zlib-1.2.5.tar.gz zlib-1.2.5]
* [http://www.oberhumer.com/opensource/lzo/download/lzo-2.03.tar.gz lzo-2.03]
* [http://prdownloads.sourceforge.net/libpng/libpng-1.4.3.tar.gz?download libpng-1.4.3]
* [http://sourceforge.net/projects/freetype/files/freetype2/2.4.2/freetype-2.4.2.tar.gz/download freetype-2.4.2]

==Installing MinGW and MSYS==
#Download and run mingw-get-inst. (download above)
#Select "Use pre-packaged repository catalogues".
#Accept the License agreement.
#Please note that MinGW should be installed to a directory path that doesn't contain any spaces. This method has been tested with a directory path of C:\MinGW.
#Select C++ Compiler and MSYS Basic System as optional components.
#Wait until every package has been downloaded and installation is finished.

==Setting up MSYS==
After installation, you will still need to set up MSYS properly.

<ol>
<li>Launch MSYS (MinGW/MinGW Shell at the start menu).</li>
<li><pre>/postinstall/pi.sh</pre></li>
<li><pre>This is a post install process that will try to normalize between
your MinGW install if any as well as your previous MSYS installs
if any.  I don't have any traps as aborts will not hurt anything.
Do you wish to continue with the post install? [yn ]</pre> Input "y". 
</li>
<li><pre>Do you have MinGW installed? [yn ]</pre> Input "y".</li>
<li><pre>Please answer the following in the form of c:/foo/bar.
Where is your MinGW installation?</pre>
Input your MinGW installation path (by default c:/mingw). If you mistyped it, the best solution is to re-install MinGW/MSYS.</li>
</ol>


On Windows 7 and Vista if you have UAC enabled, to let MSYS fully work you'll need additional steps. Go to your msys folder (C:\MinGW\msys\1.0), open msys.bat with a text editor (for example Notepad) and add the following line after @echo off:
<pre>cd "C:\MinGW\msys\1.0"</pre>
And if disk C: (or where you have msys installed) is not disk where your Windows is installed add one more line
<pre>C:</pre>
After saving the file, right click on msys.bat and choose "Run as Administrator". After that programs requiring admin rights, such as install and patch will work. (You will need right-click and run as administrator every time you run msys).

==Install Subversion==
# Create a new folder called local in the directory where MSYS is installed (by default C:\MinGW\msys\1.0, so the new directory will be C:\MinGW\msys\1.0\local).
# Unzip the folders ''bin'', ''iconv'', ''licenses'', ''share'' from the Subversion zip file (see link at the list of packages) and place into the new folder created in the previous step.

==Testing the MinGW installation==
<ul><li>Run MSYS.</li>
<li>Run the following commands:<pre>make -v
gcc -v
svn help</pre></li>
<li>They should output something.  Check if something goes wrong.</li></ul>

==Compilation of the required libraries==
For additional information about these libraries, check part 7.1) of OpenTTD Readme.

Alternatively to the wget and tar steps, you can just download all libraries and extract them to your MSYS home folder (by default it will be C:\MinGW\msys\1.0\home\UserName). To install wget you have to type in MSYS:

<pre>mingw-get install msys-wget</pre>

If you get following error:
<code>configure: error: cannot run C compiled programs.</code>
, <u>one of the reasons</u> could be your anti-virus, that silently deletes a.exe binary files. Try temporary to disable anti-virus software and compile again.

==Compiling zlib==
In MSYS:

<pre>wget http://zlib.net/zlib-1.2.5.tar.gz
tar xvfz zlib-1.2.5.tar.gz
cd zlib-1.2.5
make -f win32/Makefile.gcc BINARY_PATH=/mingw/bin INCLUDE_PATH=/mingw/include LIBRARY_PATH=/mingw/lib install
cd ..</pre>

==Compiling libpng==
In MSYS:

<pre>wget http://prdownloads.sourceforge.net/libpng/libpng-1.4.3.tar.gz?download
tar xvfz libpng-1.4.3.tar.gz
cd libpng-1.4.3
mv INSTALL INSTALL.txt
make -f scripts/makefile.mingw prefix=/mingw install
cd ..</pre>

==Compiling liblzo2==
In MSYS:

<pre>wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.03.tar.gz
tar xvfz lzo-2.03.tar.gz
cd lzo-2.03
./configure --bindir=/mingw/bin --includedir=/mingw/include --libdir=/mingw/lib --enable-static
make install
cd ..</pre>

==Compiling libfreetype==
In MSYS:

<pre>wget http://sourceforge.net/projects/freetype/files/freetype2/2.4.2/freetype-2.4.2.tar.gz/download
tar xvfz freetype-2.4.2.tar.gz
cd freetype-2.4.2
./configure --prefix=/mingw/ --enable-static
make install
cd ..</pre>

==Compiling 1.0.x and previous versions==
Compiling code from a revision earlier than [http://vcs.openttd.org/svn/changeset/19285/ r19285] (which includes any stable from 1.0.x downwards) requires an additional step to ensure that the installed libraries are detected by OpenTTD. In MSYS:

<pre>mkdir /usr/include
cp /mingw/include/zlib.h /usr/include/
cp /mingw/lib/libz.a /usr/lib/
mkdir /usr/include/lzo
cp /mingw/include/lzo/lzo1x.h /usr/include/lzo/
cp /mingw/lib/liblzo2.a /usr/lib/</pre>

==Getting and Managing the source code==
There are several ways to [[en/Development/FAQ development#how-can-i-obtain-the-source-code|obtain]] the source:

'''This is one way''':
<ol><li>Start MSYS.</li>
<li>Run: <pre>svn checkout svn://svn.openttd.org/trunk/</pre></li></ol>

'''Downloading to a given folder''':
<ol><li>Start MSYS.</li>
<li>Run: <pre>svn checkout svn://svn.openttd.org/trunk/ ~/mytestdir</pre></li>
This command will download trunk to mytestdir (<code>/home/mytestdir</code>)</ol>

'''Getting a certain revision''':
<ol><li>Start MSYS.</li>
<li>Run: <pre>svn checkout svn://svn.openttd.org/trunk/ -r#####</pre></li>
Replace ##### which a revision number.</ol>

'''Combining the two'''
<ol><li>Start MSYS.</li>
<li>Run: <pre>svn checkout svn://svn.openttd.org/trunk/ -r##### ~/mytestdir</pre></li>
This would download the given revision (#####) into the dir <code>/home/mytestdir/</code></ol>

'''Updating (to a certain revision)'''
<ol><li>Start MSYS.</li>
<li>Run: <pre>svn up</pre></li>
This would update to the latest revision, to update to a specific revision:
<li> Run: <pre>svn up -r#####</pre></li>
Replace ##### with a revision number.</ol>

==Compiling OpenTTD==
If you cannot compile, don't panic. Sometimes it may be due to coding errors, but they should be reported on [http://bugs.openttd.org/ bugs.openttd.org], so they can be fixed.

<ol><li>Start MSYS.</li>
<li>Run:<pre>cd ~/trunk
./configure
make</pre>Some warnings may be shown, but they usually do not matter.</li>
<li>The compiling is complete when the openttd.exe file is made. It will be copied to the <code>./bin</code> subfolder.</li></ol>

If you plan to apply patches files to OpenTTD source you will need to install patch. You can do this easily by typing in MSYS:

<pre>mingw-get install msys-patch</pre>

==Testing OpenTTD==
# Copy the following files from <code>(TTD)\data\</code> to <code>(OTTD)\data\</code> (alternatively, you can copy them to your [http://vcs.openttd.org/svn/browser/trunk/readme.txt#L246 shared directory data folder]):<br>sample.cat<br>trg1r.grf<br>trgcr.grf<br>trghr.grf<br>trgir.grf<br>trgtr.grf
# Copy the folder <code>(TTD)\gm</code> to <code>(OTTD)\gm</code> (Optional: only if you want music)
# Run <code>openttd.exe</code>.
# Enjoy!

[[Category:en/Development/Compiling OpenTTD]]
[[Category:en/Archive/Program Descriptions]]