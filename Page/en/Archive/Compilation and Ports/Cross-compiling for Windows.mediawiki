[[Category:en/Development/Compiling OpenTTD]]
{{en/Outdated|This is for revisions of OpenTTD before r7759}}

This guide will show you how to cross compile OpenTTD on Linux to be run under Windows, using the freely available GNU and MinGW tools. It is based upon the
[http://forums.gentoo.org/viewtopic-t-66125.html Building a cross compiler (compile on Linux, run on Windows)] guide on the Gentoo Forums.

{{en/Note|At the moment I cannot get libpng and zlib to work correctly with OpenTTD so if you want you can just ignore the "Zlib and libpng" section.}}
== What you will need ==
The first things you need to get are the sources for '''GCC''' and '''Binutils'''. You will also need the binaries for the '''Win32 API''' and '''MinGW runtime'''. The '''Win32 API''' and the '''MinGW Runtime''' is important because you need a compiler to build those in the first place; but you need those to build the compiler; and so on....<br/><br/>

You can get the latest version of these packages from the [http://mingw.org/download.shtml MinGW website].<br/><br/>

*''GNU Binutils'' - A collection of binary tools.<br/>
[http://downloads.sourceforge.net/project/mingw/GNU%20Binutils/Current%20Release_%20GNU%20binutils-2.19.1/binutils-2.19.1-src.tar.gz?use_mirror=cdnetworks-us-1 Download] (~30mb)
*''Windows API'' - Headers and import libs to support the Win32 API<br/>
[http://downloads.sourceforge.net/project/mingw/MinGW%20API%20for%20MS-Windows/Current%20Release_%20w32api-3.13/w32api-3.13-mingw32-src.tar.gz?use_mirror=iweb Download]
*''MinGW runtime'' - Run time headers to build a compiler system to build code to be run on Windows<br/>
[http://downloads.sourceforge.net/project/mingw/MinGW%20Runtime/mingwrt-3.16/mingwrt-3.16-mingw32-src.tar.gz?use_mirror=iweb Download]
<br/>
*''GCC'' - The GNU Compiler Collection
[ftp://ftp.fu-berlin.de/unix/languages/gcc/releases/gcc-4.4.2/gcc-4.4.2.tar.gz Download]
**You can choose a [http://gcc.gnu.org/mirrors.html different mirror].Make sure you download <code>releases/gcc-3.4.3/gcc-3.4.3.tar.gz.</code>

'''''Optional''''':
*zlib (compressed save games)
[http://downloads.sourceforge.net/project/libpng/zlib/1.2.3/zlib-1.2.3.tar.gz?use_mirror=iweb Download]
*libpng (for png screenshots)
[http://prdownloads.sourceforge.net/libpng/libpng-1.2.8-config.tar.gz?download Download]

== Setting up the directories ==

First you need to decide where everything will go, you need a temporary directory to build stuff in, and a permanent one to store all the tools in. You do not need system wide access, so they will both fit nicely into your home dir, for example:
<pre>
~/build - temporary directory for building (build dir)
~/cross-tools - permanent directory for all the tools (dest dir)</pre>
So make those directories, cd into them, download the files, and decompress them. GCC and Binutils need to be decompressed in the build dir while MinGW and the Win32 API need to be decompressed into the dest dir:
<pre>
cd ~
mkdir -p cross-tools/i386-mingw32msvc
mkdir -p build/source
cd ~/build/source
echo "downloading ottd, please correct the VERSION NUMBER"
wget http://nightly.openttd.org/latest/OTTD-source-nightly-r3535.tar.gz
cd ~/cross-tools/i386-mingw32msvc
tar xvfz mingw-runtime-3.7.tar.g
tar xvfz w32api-3.2.tar.gz
cd ~/build
tar xvfz source/binutils-2.15.91-20040904-1-src.tar.gz
tar xvfz source/gcc-3.4.3.tar.gz
</pre>
Configuring and building GCC and Binutils takes fooorrreeeevver so it is a good idea to keep your source directories clean in case something goes wrong.
<pre>
mkdir ~/build/binutils-i386-mingw32msvc
mkdir ~/build/gcc-i386-mingw32msvc
</pre>

== Building Binutils and GCC ==
Configure, build and install Binutils. This will take a rather long time, so you may want to go and play your favourite game.
<pre>cd /home/luca/build/binutils-i386-mingw32msvc
/home/luca/build/binutils-2.15.91-20040904-1/configure --prefix=/home/luca/cross-tools --target=i386-mingw32msvc
make
make install
</pre>
Next you need to add the path of your newly compiled tools to your PATH variable:
<pre>export PATH=/home/luca/cross-tools/bin:$PATH</pre>
Make sure you add your current PATH after the new stuff, otherwise you will have problems later on. Now more compiling, GCC this time.
<pre>cd /home/luca/build/gcc-i386-mingw32msvc
/home/luca/build/gcc-3.4.3/configure -v --prefix=/home/luca/cross-tools --target=i386-mingw32msvc --with-headers=/home/luca/cross-tools/i386-mingw32msvc/include --with-gnu-as --with-gnu-ld --without-newlib --disable-multilib
make
make install</pre>
If all went well, you should have got no errors and should now have a compiler that can compile on Linux for Windows. If you want to free up some space you should clean out the sys-includes directory, it is needed during the gcc compile, but not by anything else.
<pre>rm -rf /home/luca/cross-tools/i386-mingw32msvc/sys-include</pre>

== Testing ==
Here is a little test to make sure your compiler is working - it is no use trying anything else unless it is.


Create the file hello.c:
<pre>#include <stdio.h>
int main(void)
{
  printf("Hello World!\n");
  exit(0);
}</pre>
And to compile:
<pre>i386-mingw32msvc-gcc hello.c -o hello.exe</pre>
To test it either run it (in a DOS prompt) under Windows:
<pre>hello.exe
Hello World!</pre>
Or under WINE on Linux:
<pre>wine hello.exe
Hello World!</pre>

== Zlib and libpng ==

Next you need to compile zlib...
<pre>cd /home/luca/build
tar xvfz zlib-1.2.2.tar.gz
cd zlib-1.2.2/
./configure --prefix=/home/luca/cross-tools/
make CC=i386-mingw32msvc-gcc AR="i386-mingw32msvc-ar rc" RANLIB=i386-mingw32msvc-ranlib
make install prefix=/home/luca/cross-tools/</pre>
...and libpng...
<pre>cd /home/luca/build
tar xvfz libpng-1.2.8-config.tar.gz
cd libpng-1.2.8-config
cp scripts/makefile.linux Makefile
make target=i386-mingw32msvc host=i386-mingw32msvc build=i386-linux prefix=/home/luca/cross-tools/
make install prefix=/home/luca/cross-tools/</pre>
...and voila! You should now be able to compile OpenTTD.

== Compiling OpenTTD ==
Nothing out of the ordinary needs to be done for OpenTTD, just a few options need to be set in Makefile.config. Everthing else should be left unset / set as the default:
<pre>WITH_ZLIB:=0
WITH_PNG:=0
WITH_SDL:=0

WIN32:=1
UNIX:=
MINGW:=1

CC_TARGET:=i386-mingw32msvc-gcc
CC_HOST:=cc
WINDRES:=i386-mingw32msvc-windres</pre>