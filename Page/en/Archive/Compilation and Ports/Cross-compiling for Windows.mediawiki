= Native MinGW =
 {{en/Note|Should work analogously on Mac OS X, please test}}
You will need the MinGW binaries, includes and libraries for Linux-to-Windows cross-compiling (32-bit, 64-bit not tested) installed under /usr/i586-mingw32msvc (Debian/Ubuntu: sudo apt-get install mingw32). The further steps are more or less the same as those required for compiling with MinGW on Windows. 

For consistency, self-installed libraries etc. will be stored in subfolders of /usr/local/i586-mingw32msvc. However, the OpenTTD configure script isn't very good at finding libraries that match the selected host, so some will need to be specified manually/linked to a hardcoded directory (see end).
=== 64-bit builds ===


Work exactly the same way, but with all occurences of i586-mingw32msvc replaced by x86_64-w64-mingw32 (you will need 64-bit MinGW, of course - Ubuntu: mingw-w64 package). You will need to link a few files to alternative names to be able to compile with ICU after you have built ICU:
<pre>
sudo ln -s <icu_sourcedir>/source/common/cmemory.h /usr/local/x86_64-w64-mingw32/include
sudo ln -s /usr/local/x86_64-w64-mingw32/lib/libsicuuc.a /usr/local/x86_64-w64-mingw32/lib/libicuuc.a
sudo ln -s /usr/local/x86_64-w64-mingw32/lib/libsicule.a /usr/local/x86_64-w64-mingw32/lib/libicule.a
sudo ln -s /usr/local/x86_64-w64-mingw32/lib/libsiculx.a /usr/local/x86_64-w64-mingw32/lib/libiculx.a</pre>

Even with these, libicui18n and libicudata still can't be found and apparently weren't even compiled? Everything does work if you leave out ICU.

==List of packages==
This tutorial has been tested with the following versions of the required packages:

* OpenTTD 1.3.x or trunk.
* [http://zlib.net/zlib-1.2.7.tar.gz zlib-1.2.7]
* [http://sourceforge.net/projects/libpng/files/libpng15/1.5.13/libpng-1.5.13.tar.xz/download libpng-1.5.13]
* [http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz lzo-2.06]
* [http://sourceforge.net/projects/freetype/files/freetype2/2.4.10/freetype-2.4.10.tar.gz/download freetype-2.4.10]
* [http://tukaani.org/xz/xz-5.0.4.tar.gz xz-5.0.4]
* [http://download.icu-project.org/files/icu4c/4.6/icu4c-4_6-src.zip libicu-4.6]

==Testing MinGW/MSYS installation==
<ul><li>Open the Linux command line.</li>
<li>Run the following command:<pre>
i586-mingw32msvc-gcc -v</pre></li>
<li>It should output something.</li></ul>

==Compilation and installation of the required packages==
Install patch, wget, unzip and your favorite version control system if not already installed.

==Compiling zlib==
At the command line:

<pre>wget http://zlib.net/zlib-1.2.8.tar.gz
tar xvfz zlib-1.2.8.tar.gz
cd zlib-1.2.8
#  automatic replacement
sed -e s/"PREFIX ="/"PREFIX = i586-mingw32msvc-"/ -i win32/Makefile.gcc
make -f win32/Makefile.gcc 
sudo BINARY_PATH=/usr/local/i586-mingw32msvc/bin INCLUDE_PATH=/usr/local/i586-mingw32msvc/include LIBRARY_PATH=/usr/local/i586-mingw32msvc/lib make -f win32/Makefile.gcc install
cd ..</pre>

==Compiling libpng==
At the command line:
<pre>wget http://sourceforge.net/projects/libpng/files/libpng15/older-releases/1.5.16/libpng-1.5.16.tar.xz/download
tar xvfJ download
cd libpng-1.5.16
mv INSTALL INSTALL.txt
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib 
make
sudo make install
cd ..</pre>

==Compiling liblzo2==
{{en/Note|May require a "make clean" when rebuilding}}
At the command line:

<pre>wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz
tar xvfz lzo-2.06.tar.gz
cd lzo-2.06
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib
make
sudo make install
cd ..</pre>

==Compiling libfreetype==
At the command line:

<pre>wget http://sourceforge.net/projects/freetype/files/freetype2/2.4.10/freetype-2.4.10.tar.gz
tar zxvf freetype-2.4.10.tar.gz
cd freetype-2.4.10
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib
make
sudo make install
cd ..</pre>

==Compiling xz==
Liblzma (which is a part of xz) is required for compiling OpenTTD since [http://vcs.openttd.org/svn/changeset/21044/ r21044]. pkg-config should already be installed on your system; since it's not a library, the system versions can be used.

At the command line:

<pre>wget http://tukaani.org/xz/xz-5.0.4.tar.gz
tar xvfz xz-5.0.4.tar.gz
cd xz-5.0.4
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static --disable-threads CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib
make 
sudo make install
cd ..</pre>

==Compiling harbuzz==
You only need harfbuzz for new version of libicu, for example 58.2.

You will need to create a symlink to libpng12.a, because libtool used by harfbuzz puts it into linked libraries:
<pre>
sudo ln -s /usr/local/i586-mingw32msvc/lib/libpng.a /usr/local/i586-mingw32msvc/lib/libpng12.a 
</pre>

Download and compile it:

<pre>
wget https://www.freedesktop.org/software/harfbuzz/release/harfbuzz-1.4.2.tar.bz2
tar xvf harfbuzz-1.4.2.tar.bz2
cd harfbuzz-1.4.2
export PKG_CONFIG_PATH=/usr/local/i586-mingw32msvc/lib/pkgconfig
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static --disable-shared --with-glib=no --with-cairo=no --with-fontconfig=no --with-icu=no
make LIBS="-lpng16 -lz"
sudo make install
</pre>

Compile icu-le-hb:
<pre>
wget https://www.freedesktop.org/software/harfbuzz/release/icu-le-hb-1.0.3.tar.gz
cd icu-le-hb-1.0.3
export PKG_CONFIG_PATH=/usr/local/i586-mingw32msvc/lib/pkgconfig
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static
make
sudo make install
</pre>

You might need to have ICU already compiled and installed without icu-le-hb first, to compile icu-le-hb.

==Compiling libicu==
libicu is an optional library used for handling of right-to-left scripts (e.g. Arabic and Persian) and the natural sorting of lists.

This was attempted with ICU 5.3 (newest release) after failure with the 4.6 version used in the Windows MinGW guide. The size reduction patches were not tested and probably won't work anyway.

* Fetch and unpack the ICU source code
<pre>wget http://download.icu-project.org/files/icu4c/53.1/icu4c-53_1-src.tgz
tar xvfz icu4c-53_1-src.tgz
cd icu
mkdir build
mkdir build-cross</pre>
* Link the MinGW toolchain binaries to something the ICU configure script detects (really an ICU bug; you can skip this step when compiling a 64-bit version)
<pre>
cd /usr/bin
for file in `ls i586-mingw32msvc-*`; do sudo ln -s $file i586-mingw32-`echo $file | rev | cut -d- -f1 | rev`; done
cd <main ICU source directory>
</pre>

* Compile ICU for your platform first, this is required to make a few build tools available 
<pre>
cd build
../source/configure
make -j<N>
cd ..</pre>
* Prepare and execute cross-compilation. Note the missing "msvc" in --host (see also http://d.hatena.ne.jp/higepon/20110829/1314628455). Also, you can't use --disable-shared because icu-config complains about the missing DLLs.
<pre>
cd build-cross
# --disable-threads isn't supported anymore
../source/configure --host=i586-mingw32 --prefix=/usr/local/i586-mingw32msvc  --enable-static --disable-strict \
        CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib --with-cross-build=`pwd`/../build
sudo make install
cd ..</pre>
* You may need to copy/link the ICU header cmemory.h to an appropriate location (yet another ICU bug?): 
<pre>sudo cp source/common/cmemory* /usr/local/i586-mingw32msvc/include/</pre>
* Link the built DLLs to something icu-config detects (really an ICU bug)
<pre>
cd /usr/local/i586-mingw32msvc/lib
for dll in `ls icu*.dll`; do sudo ln -s $dll lib$dll; done
</pre>
* If the build fails with error 'undefined reference to _free_locale', add parameter 'LIBS=-lmsvcr110' to 'configure' command line, this happens with ICU 58.2.

==Getting the source code==
Same as for standard Linux.

==Compiling OpenTTD==
{{en/Note|If you are compiling for both 32 bit and 64 bit, make sure /mingw links to the correct folder for the current arch}}
<ol>
<li>Run:<pre>cd ~/<path_to_source>
# Stupid hardcoded directories; you only need to do this once
# Note the missing slash at the end of the first argument, this is important
sudo ln -s /usr/local/i586-mingw32msvc /mingw

# This points pkg-config to our local mingw installation
export PKG_CONFIG_PATH=/usr/local/i586-mingw32msvc/lib/pkgconfig
# Also override freetype-config, icu-config etc with our own versions
export PATH=/usr/local/i586-mingw32msvc/bin:$PATH

# Configure, disable all libraries that are falsely detected, explicitly specify others
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc CFLAGS="-I/usr/local/i586-mingw32msvc/include  --sysroot=/usr/i586-mingw32msvc" \ 
LDFLAGS="-L/usr/local/i586-mingw32msvc/lib"  --without-sdl --with-lzo2=/usr/local/i586-mingw32msvc/lib/liblzo2.a
make</pre>

Installing Wine and running 

<pre>wine bin/openttd.exe</pre> 
will start your Windows OpenTTD version.

[[Category:en/Development/Compiling OpenTTD]]