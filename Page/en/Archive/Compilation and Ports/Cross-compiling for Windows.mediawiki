[[Category:en/Development/Compiling OpenTTD]]
= Wine/MinGW =
One way to compile an OpenTTD executable for Windows on any operating system supported by [http://winehq.org Wine], such as Linux, is to use it to set up a Windows MinGW environment - follow the existing [[en/Archive/Compilation and Ports/Compiling on Windows using MinGW]] guide. This is rather slow (about 1/3 native speed for make, much slower for configure), but guaranteed to work.

However, you must replace (or override in the Wine configuration tool) the Wine-supplied msvcp60.dll with an official Windows one (6.0 version) or SVN will not run. You can find it at [http://www.dll-files.com/dllindex/dll-files.shtml?msvcp60 dll-files.com], click on the "Alternative versions" menu entry and download the second one listed.

= Native MinGW =
 {{en/Note|Should work analogously on Mac OS X, please test}}
You will need the MinGW binaries, includes and libraries for Linux-to-Windows cross-compiling (32-bit, 64-bit not tested) installed under /usr/i586-mingw32msvc (Debian/Ubuntu: sudo apt-get install mingw32). The further steps are more or less the same as those required for compiling with MinGW on Windows. 

For consistency, self-installed libraries etc. will be stored in subfolders of /usr/local/i586-mingw32msvc. However, the OpenTTD configure script isn't very good at finding libraries that match the selected host, so some will need to be specified manually/linked to a hardcoded directory (see end).
=== 64-bit builds ===
Should work exactly the same way, but with the mingw64 package and all occurences of i586-mingw32msvc replaced by x86_64-w64-mingw32. It does for the libraries, but the OpenTTD build fails anyway:
<pre>In file included from /home/****/trunk/src/os/windows/../../network/core/os_abstraction.h:42:0,
                 from /home/****/trunk/src/os/windows/../../network/core/tcp_content.h:17,
                 from /home/****/trunk/src/os/windows/../../fios.h:18,
                 from /home/****/trunk/src/os/windows/win32.cpp:17:
/home/****/trunk/src/os/windows/../../network/core/../../os/windows/win32.h:39:28: error: expected identifier before numeric constant
 #define SHGFP_TYPE_CURRENT 0
                            ^
/home/****/trunk/src/os/windows/../../network/core/../../os/windows/win32.h:39:28: error: expected '}' before numeric constant
/home/****/trunk/src/os/windows/../../network/core/../../os/windows/win32.h:39:28: error: expected unqualified-id before numeric constant
In file included from /home/****/trunk/src/os/windows/win32.cpp:21:0:
/usr/share/mingw-w64/include/shlobj.h:710:5: error: 'SHGFP_TYPE' does not name a type
   } SHGFP_TYPE;
     ^
In file included from /home/****/trunk/src/os/windows/win32.cpp:21:0:
/usr/share/mingw-w64/include/shlobj.h:2747:1: error: expected declaration before '}' token
 }
 ^
make[1]: *** [os/windows/win32.o] Error 1
</pre>

==List of packages==
This tutorial has been tested with the following versions of the required packages:

* OpenTTD 1.3.x or trunk.
* [http://zlib.net/zlib-1.2.7.tar.gz zlib-1.2.7]
* [http://sourceforge.net/projects/libpng/files/libpng15/1.5.13/libpng-1.5.13.tar.xz/download libpng-1.5.13]
* [http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz lzo-2.06]
* [http://sourceforge.net/projects/freetype/files/freetype2/2.4.10/freetype-2.4.10.tar.gz/download freetype-2.4.10]
* [http://tukaani.org/xz/xz-5.0.4.tar.gz xz-5.0.4]
* [http://download.icu-project.org/files/icu4c/4.6/icu4c-4_6-src.zip libicu-4.6]

==Testing MinGW/MSYS installation==
<ul><li>Open the Linux command line.</li>
<li>Run the following command:<pre>
i586-mingw32msvc-gcc -v</pre></li>
<li>It should output something.</li></ul>

==Compilation and installation of the required packages==
Install patch, wget, unzip and your favorite version control system if not already installed.

==Compiling zlib==
At the command line:

<pre>wget http://zlib.net/zlib-1.2.8.tar.gz
tar xvfz zlib-1.2.8.tar.gz
cd zlib-1.2.8
#  automatic replacement
sed -e s/"PREFIX ="/"PREFIX = i586-mingw32msvc-"/ -i win32/Makefile.gcc
make -f win32/Makefile.gcc 
sudo BINARY_PATH=/usr/local/i586-mingw32msvc/bin INCLUDE_PATH=/usr/local/i586-mingw32msvc/include LIBRARY_PATH=/usr/local/i586-mingw32msvc/lib make -f win32/Makefile.gcc install
cd ..</pre>

==Compiling libpng==
At the command line:
<pre>wget http://sourceforge.net/projects/libpng/files/libpng15/older-releases/1.5.16/libpng-1.5.16.tar.xz/download libpng-1.5.16.tar.xz
tar xvfJ libpng-1.5.16.tar.xz
cd libpng-1.5.16
mv INSTALL INSTALL.txt
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib 
make
sudo make install
cd ..</pre>

==Compiling liblzo2==
At the command line:

<pre>wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz
tar xvfz lzo-2.06.tar.gz
cd lzo-2.06
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib
make
sudo make install
cd ..</pre>

==Compiling libfreetype==
At the command line:

<pre>wget http://sourceforge.net/projects/freetype/files/freetype2/2.4.10/freetype-2.4.10.tar.gz
tar zxvf freetype-2.4.10.tar.gz
cd freetype-2.4.10
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib
make
sudo make install
cd ..</pre>

==Compiling xz==
Liblzma (which is a part of xz) is required for compiling OpenTTD since [http://vcs.openttd.org/svn/changeset/21044/ r21044]. pkg-config should already be installed on your system; since it's not a library, the system versions can be used.

At the command line:

<pre>wget http://tukaani.org/xz/xz-5.0.4.tar.gz
tar xvfz xz-5.0.4.tar.gz
cd xz-5.0.4
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc --enable-static --disable-threads CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib
make 
sudo make install
cd ..</pre>

==Compiling libicu== 
libicu is an optional library used for handling of right-to-left scripts (e.g. Arabic and Persian) and the natural sorting of lists. It can take a long time to compile, so you can safely omit this step if you don't require libicu.

This was attempted with ICU 5.3 (newest release) after failure with the 4.6 version used in the Windows MinGW guide. The size reduction patches were not tested and probably won't work anyway.

{{en/Warning|Compiling with libicu will greatly increase the size of the resulting OpenTTD executable.<BR><BR>'''openttd.exe size with libicu: '''approx. 25 MB<BR>'''openttd.exe size with libicu (reduced icudata size): '''approx. 10 MB<BR>'''openttd.exe size without libicu: '''approx. 8 MB}}
Steps (doesn't entirely/reliably work yet, probably should separate the build directories for the native and cross-compiled ICU versions):
* Fetch and unpack the ICU source code
<pre>wget http://download.icu-project.org/files/icu4c/5.3/icu4c-53_1-src.tgz
tar xvfz icu4c-53_1-src.tgz
cd icu/source</pre>
* Compile ICU for your platform first, this is required to make a few build tools available 
<pre>./configure
make</pre>
* Prepare and execute cross-compilation
<pre>cd config
cp mh-unknown mh-unknown.1
cp mh-mingw mh-unknown
cd ..
# --disable-threads isn't supported anymore
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc  --enable-static --disable-shared --disable-strict CPPFLAGS=-I/usr/local/i586-mingw32msvc/include LDFLAGS=-L/usr/local/i586-mingw32msvc/lib --with-cross-build=`pwd`

make
sudo make install
cd ../..</pre>
One build was successful, but icu-config --version failed anyway because it couldn't find libicu4c.dll (which, as a dynamic library, shouldn't have been built anyway), and thus, OpenTTD refused to configure itself to use the compiled ICU version (--with-icu=/usr/local/i586-mingw32msvc/bin/icu-config).

==Getting the source code==
Same as for standard Linux.
==Compiling OpenTTD==
<ol>
<li>Run:<pre>cd ~/<path_to_source>
# Stupid hardcoded directories; you only need to do this once
# Note the missing slash at the end of the first argument, this is important
sudo ln -s /usr/local/i586-mingw32msvc /mingw

# Configure, disable all libraries that are falsely detected, explicitly specify others
./configure --host=i586-mingw32msvc --prefix=/usr/local/i586-mingw32msvc CFLAGS="-I/usr/local/i586-mingw32msvc/include  --sysroot=/usr/i586-mingw32msvc" \ 
LDFLAGS="-L/usr/local/i586-mingw32msvc/lib"  --without-sdl --without-icu --with-png=/usr/local/i586-mingw32msvc/bin/libpng-config \ 
--with-freetype=/usr/local/i586-mingw32msvc/bin/freetype-config
make</pre>

Installing Wine and running 

<pre>wine bin/openttd.exe</pre> 
will start your Windows OpenTTD version.