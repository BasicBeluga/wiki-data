This page will explain how to set up openttd as a screensaver for your xserver.  <tt>xscreensaver</tt> and <tt>gnome-screensaver</tt> invoke screensavers in (fairly) similar ways.  A candidate screensaver needs to be able to target its video output at the correct 'X11 window'.  Detecting which x11 window to use is simple for the preview mode (when embedding in the <tt>xscreensaver</tt>/<tt>gnome-screensaver</tt> preview window) but to correctly embed in the ''virtual'' root window (when testing the screensaver in full-screen mode, or running it properly) requires a [[#patching-xdpyinfo|patch to <tt>xdpyinfo</tt>]].  To detect the dimensions of the window in which to embed requires <tt>xwininfo</tt>.  [[#gnome-screensaver-config-file|<tt>gnome-screensaver</tt>]] and [[#xscreensaver-config-file|<tt>xscreensaver</tt>]] config files are also provided.  A [http://bugs.openttd.org/task/306 patch for openttd (against version R6159)] allows GUI elements to be hidden, but is not strictly necessary.

==using an SDL application as a screensaver==
[[#known-bugs|See known bugs for the openttd screensaver wrapper-script]] as they probably apply to the following script.  SDL supports an environment variable, <tt>SDL_WINDOWID</tt>, which allows you to direct the SDL application's video output to the chosen X11 window ID.  The shell utility [[#patching-xdpyinfo|<tt>xdpyinfo</tt> (patched)]] allows you to detect the virtual root window and <tt>xwininfo</tt> allows you to detect its dimensions (for passing as arguments or environment variables to your SDL app.).  The SDL screensaver wrapper-script ''prototype'' follows.

<pre>
#!/bin/bash

# copyright (C) 2006 Eugene St Leger (GrimRC)
# Distributed under the terms of the GNU General Public License v2

# SDL screensaver wrapper-script prototype version 2

# these tests allow you to pass these options as environment variables to this script
if test -z $SDLPROG_BINDIR; then SDLPROG_BINDIR="/usr/bin/"; fi
if test -z $SDLPROG_FILENAME; then SDLPROG_FILENAME="sdlprogram"; fi
if test -z $SDLPROG_OPTS; then SDLPROG_OPTS=""; fi

# check if xscreen-saver has passed a window id to use
if test $1 && test $1 = '-window-id' && test $2 && test -z $SDL_WINDOWID;
	then {
		# use the window id given
		export SDL_WINDOWID=$2;
	} elif test -z $SDL_WINDOWID;
	then {
		# get the *virtual* root window id from xdpyinfo
		# this requires a patched (by GrimRC) xdpyinfo (>1.0.1)
		export SDL_WINDOWID=`xdpyinfo | grep -i "virtual root window id:" | sed 's/ //g' | cut -f2 -d':'`;
	}
fi

#these variables can be passed as arguments to the SDL application so it may set its resolution appropriately
WIDTH=`xwininfo -id $SDL_WINDOWID | grep "Width:" | sed 's/ //g' | cut -f2 -d':'`;
HEIGHT=`xwininfo -id $SDL_WINDOWID | grep "Height:" | sed 's/ //g' | cut -f2 -d':'`;

$SDLPROG_BINDIR$SDLPROG_FILENAME $SDLPROG_OPTS &
# capture sdlprogram's PID
export SDLPROG_PID=$!;

# trap EXIT so we can clean up
trap 'kill $SDLPROG_PID; wait $SDLPROG_PID; exit' EXIT;

# keep this script alive; cleanup happens on exit by the previous trap
wait $SDLPROG_PID;
</pre>

==using openttd as a screensaver==
The openttd screensaver wrapper-script follows.  It passes the detected width and height of the window to openttd with <tt>-r</tt>.  This script needs to be called by a screensaver-manager; for example, [[#xscreensaver-config-file|<tt>xscreensaver</tt>]] or [[#gnome-screensaver-config-file|<tt>gnome-screensaver</tt>]].  The sound and music are muted by the script by passing options to openttd.  You can add the -g option to make openttd immediately load a savegame (such as the intro 'savegame', in data/opntitle.dat).  To hide the GUI elements properly, you'll need a [http://bugs.openttd.org/task/306 recent, patched, version of openttd].

<pre>
#!/bin/bash

# copyright (C) 2006 Eugene St Leger (GrimRC)
# Distributed under the terms of the GNU General Public License v2

# Openttd screensaver wrapper-script version 8

# known bug: gnome-screensaver's (2.14.2) preview mode shows openttd properly but then fails to show other screensavers properly (not serious)

# these tests allow you to pass these options as environment variables to this script
if test -z $OPENTTD_BINDIR; then OPENTTD_BINDIR="/usr/games/bin/"; fi
if test -z $OPENTTD_FILENAME; then OPENTTD_FILENAME="openttd"; fi
# don't put -r or -c options (resolution and config options) in this variable as they're set later automagically
# -s null & -m null stop sound & music
if test -z $OPENTTD_OPTS; then OPENTTD_OPTS="-s null -m null"; fi

# check if xscreen-saver has passed a window id to use
if test $1 && test $1 = '-window-id' && test $2 && test -z $SDL_WINDOWID;
	then {
		# use the window id given
		export SDL_WINDOWID=$2;
	} elif test -z $SDL_WINDOWID;
	then {
		# get the *virtual* root window id from xdpyinfo
		# this requires a patched (by GrimRC) xdpyinfo (>1.0.1)
		export SDL_WINDOWID=`xdpyinfo | grep -i "virtual root window id:" | sed 's/ //g' | cut -f2 -d':'`;
	}
fi


if { export OPENTTD_CFGFILE=`mktemp -p /tmp openttd.cfg.XXXXXX` && cp -f ~/.openttd/openttd.cfg $OPENTTD_CFGFILE; } then {
	export WIDTH=`xwininfo -id $SDL_WINDOWID | grep "Width:" | sed 's/ //g' | cut -f2 -d':'`;
	export HEIGHT=`xwininfo -id $SDL_WINDOWID | grep "Height:" | sed 's/ //g' | cut -f2 -d':'`;
	OPENTTD_OPTS="$OPENTTD_OPTS -r $WIDTH\x$HEIGHT -c $OPENTTD_CFGFILE";

	$OPENTTD_BINDIR$OPENTTD_FILENAME $OPENTTD_OPTS &

	# capture openttd's PID
	export OPENTTD_PID=$!;
	# trap EXIT so we can clean up
	trap 'kill $OPENTTD_PID; wait $OPENTTD_PID; rm $OPENTTD_CFGFILE; exit' EXIT;

	# keep this script alive; cleanup happens on exit by the previous trap
	wait $OPENTTD_PID;
} else echo error - copying openttd.cfg failed >&2;
fi
</pre>

===known bugs===
*<tt>gnome-screensaver</tt> (2.14.2) has a minor problem in preview mode, where if openttd has been previewed (which works) then it can't preview any other screensavers until it's restarted; possibly a minor bug in <tt>gnome-screensaver</tt> itself

==patching <tt>xdpyinfo</tt>==
<tt>xdpyinfo</tt> needs to be [http://bugs.freedesktop.org/show_bug.cgi?id=7968 patched] to display the ''virtual'' root window ID.  You need to pass <tt>-p1</tt> to <tt>patch</tt> to strip the first directory (<tt>man patch</tt>).

==<tt>xscreensaver</tt> config file==
You need to place the [[#using-openttd-as-a-screensaver|openttd screensaver wrapper-script]], or a symbolic link to it, in <tt>/usr/lib/misc/xscreensaver/</tt> (for Gentoo at least).  Call it something like <tt>openttd_screensaver</tt>, but remember the name used.  Now add the name used to either <tt>/usr/lib/X11/app-defaults/XScreenSaver</tt> (system-wide) or <tt>~/.xscreensaver</tt> (user-specific), following the instructions in the <tt>xscreensaver</tt> <tt>man</tt> page.  Then you need to create a config file in <tt>/usr/share/xscreensaver/config/</tt>, like the one that follows.  Call it <tt>openttd.xml</tt>.

<pre>
<?xml version="1.0" encoding="ISO-8859-1"?>

<screensaver name="openttd" _label="openttd screensaver">

  <command arg=""/>

  <_description>
openttd game
  </_description>
</screensaver>
</pre>

==<tt>gnome-screensaver</tt> config file==
[[#known-bugs|See known bug]].  You need to place the [[#using-openttd-as-a-screensaver|openttd screensaver wrapper-script]], or a symbolic link to it, in <tt>/usr/libexec/gnome-screensaver/</tt> (for Gentoo).  Call it something like <tt>openttd_screensaver</tt>, but remember the name used.  The config-file which follows needs to be called something like <tt>openttd.desktop</tt> and placed in <tt>/usr/share/gnome-screensaver/themes/</tt> (on Gentoo).  Change the appearances of <tt>openttd_screensaver</tt> in the script, if you did not use the same name.

<pre>
[Desktop Entry]
Encoding=UTF-8
Name=openttd game
Name[en_CA]=openttd game
Name[en_GB]=openttd game
Name[de]=openttd spiel
Comment=openttd game
Comment[de]=openttd spiel
Comment[en_CA]=openttd game
Exec=openttd_screensaver
TryExec=openttd_screensaver
StartupNotify=false
Terminal=false
Type=Application
Categories=GNOME;Screensaver;
</pre>

==ToDo==
*fix [[#known-bugs|bug]]
*get the [[#using-openttd-as-a-screensaver|openttd screensaver wrapper-script]] included in Gentoo openttd ebuild or openttd distribution itself
*create an screensaver.scr script to make openttd load games, pan the camera, and maybe even join network games
*create a decent [[#xscreensaver-config-file|<tt>.xml</tt> file for <tt>xscreensaver</tt>]] and improve the [[#using-openttd-as-a-screensaver|openttd screensaver wrapper-script]] so that <tt>xscreensaver-demo</tt> can be used to pass parameters to openttd
*
*
*