This work is in parallel with [[en/Archive/Development/Old NewGRF roadtypes 1|road types]].

==Rail type labels==

These work in the same way as cargo labels.
The default rail type labels are:

* RAIL
* ELRL
* MONO
* MGLV

By default, with no translation table in place, RAIL, MONO and MGLV are used. ELRL can only be selected by specifying RAIL and a tractive type of 2 (electric).

This changes with a translation table, and the selected rail type is used directly. If the railtype is unavailable then the locomotive becomes unavailable.

The translation table is loaded by action 0, feature 8, property 12.

===Railtype fallbacks===
Testing of different rail types can be provided by use of action 7:

 Action 0: Install table consisting of RAIL 3RDR ELRL
 Action 7: Skip next line if 3RDR exists
 Action 0: Install table consisting of RAIL ELRL ELRL

This will cause rail vehicles of the second rail type to be 3RDR if that type exists, or ELRL if it doesn't, allowing some flexibility.

==Rail type translation table (action 0, feature 8, property 12)==

This is a list of labels and works in the same way as cargo translation tables.

This is an example table that sets up six rail type translations:

 1 * 30      00 08 01 06 00 12 "RAIL" "3RDR" "ELRL" "NGRL" "MONO" "MGLV"

==Rail type properties (action 0, feature 10)==

{|
|-
||Property||Format||Description
|-
||08||dword||Label - this is loaded in the reservation stage.
|-
||09||word||String ID for tool bar window caption (must start with white)
|-
||0A||word||String ID for main menu text
|-
||0B||word||String ID for build vehicle window caption (must start with white)
|-
||0C||word||String ID for rail type shown in autoreplace window
|-
||0D||word||String ID for new locomotive text: We have just designed a new "railway locomotive"
|-
||0E||byte (dword ...)||Compatible rail type list (list of labels, turned into a bitmask internally)
|-
||0F||byte (dword ...)||Powered rail type list (list of labels, turned into a bitmask internally)
|-
||10||byte||Rail type flags: bit 0 = draw catenary, bit 1 = maglev acceleration model
|-
||11||byte||Curve speed advantage, format to be decided
|-
||12||byte||Type of default station building graphic to use: 0 = Rail, 1 = Monorail, 2 = Maglev.
|-
||13||byte||Construction cost factor.
|-
||14||word||Max speed limit in mph*1.6 (approximately km/h) (To be decided)
|}

In NFO, rail type IDs will be GRF local, with an ID to label mapping. Therefore to modify an existing rail type, specify its label in property 08. To create a new rail type, again just specify its label in property 08. This way there is no need for complex GRM mechanisms to allocate IDs. If a label 'clashes' with another GRF, then one GRF will end up modifying the properties instead of creating a new rail type.

When a new rail type is created, it is populated with the information from the first rail type, except that the compatible and powered list contain only the rail type being created. However, no default values should be assumed, as the first rail type may have been modified.

==Rail type Action3/2/1 scheme==

===Action 1===

Just a regular action 1 for sprites.

===Action 2===

Like normal, used to assign sprites from action 1 to 'cargo ids'. There are no variables for rail types.

===Action 3===

For rail types the cargo type byte specifies the type of sprites being assigned. These are as follows:

{| border = "1" cellpadding="4"
!'Cargo' type!!Sprite type!!Number of sprites
|-
|00||Track overlays for junctions||11 (6 flat pieces, 1 X-crossing piece, and 4 slope pieces)
|-
|01||Cursors and icons||16 (4 rail directions, autorail, depot, tunnel and convert rail)
|-
|02||Ground||26
|-
|03||Tunnel||8
|-
|04||Snowy ground||26
|-
|05||Snowy tunnel||8
|-
|06||Desert ground||26
|-
|07||Desert tunnel||8
|-
|08||Custom catenary||48
|-
|09||Level crossing overlay||6 (2 for perpendicular, 4 for diagonal crossings)
|-
|0A||Bridge surfaces||6 (10 sprites if we ever include diagonal bridges)
|-
|0B||Depots||6 (2 sprites for each southish, 1 sprite for each northish)
|-
|0C||Autorail sprites||55
|}

Not all types need to be defined, if the type is not going to be used anyway.

Executing a varaction for every rail tile would probably be quite slow, so for the moment it is done once on starting a game. For this reason, no global varaction 2 variables should be used.

==Action 7/9 additions==

{|
|-
||Condition||Description
|-
||0D||Skip if the rail type label is not defined
|-
||0E||Skip if the rail type label is defined
|-
|}

==Code Already Written==

Code to load rail type translation tables, along with adding default the labels, is already written. There is currently no code to add a new rail type.