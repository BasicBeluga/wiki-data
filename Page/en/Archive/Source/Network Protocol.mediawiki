[[Translation:en/Archive/Source/Network Protocol]]
Here below is a draft by me (TrueLight), how the network is going to be done.

It defines the protocol in great detail. What packages are sent when and by whom. Via this page we will remake network.c, and hopefully make it more stable and endian-compatible.





== Some structs ==


Below are two structs used for network info. Comments are very welcome!

<pre>
// This is the struct used by both client and server
//  some fields will be empty on the client (like game_password) by default
//  and only filled with data a player enters.
typedef struct NetworkGameInfo {
	char server_name[40];		// Server name
	uint16 server_revision;		// The SVN version number the server is using (e.g.: '304')
								//  It even shows a SVN version in release-version, so
								//  it is easy to compare if a server is of the correct version
	byte server_lang;			// Language of the server (we should make a nice table for this)
	byte clients_max;			// Max clients allowed on server
	byte clients_on;			// Current count of clients on server
	byte specators_on;			// How many spectators do we have?
	uint16 game_date;			// Current date
	char game_password[20];		// Password for the game
	char map_name[40];			// Map which is played ["random" for a randomized map]
	uint16 map_width;			// Map width
	uint16 map_height;			// Map height
	byte map_set;				// Graphical set
	char player_password[MAX_PLAYERS][20];	// A client can protect his game-player with a
											//   password.. here we save that password
} NetworkGameInfo;

// client_ip is only used on the server-end. Clients never get the IP of other
//  clients.
typedef struct NetworkPlayerInfo {
	char client_name[40];		// Name of the client
	uint64 player_money;		// How much money the client has
	byte client_lang;			// The language of the client
	byte client_playas;			// As which player is this client playing
	char client_ip[12];			// IP-address of the client (so he can be banned)
	char company_name[80];		// Name of the company (80 enough?)
	uint64 company_value;		// The current value of the company
	uint16 join_date;			// Gamedate the player has joined
} NetworkPlayerInfo;
</pre>


== Protocol ==


The general idea behind the protocol is, is that the clients are always 1 frame behind the server, so commands can be handled correctly. When the server received PACKET_MAP_OK from the client, it assumes that the client is ready and is shown as joined to everyone. Then the client receives the commands done by other clients between the time of the savegame and the time of PACKET_MAP_OK for the right frame and the client is supposed to quick run through all the frames and handle the commands at the given time, till it reached the frame of the server - 1. From that point on, the client is in sync and continues normally (only receiving PACKET_COMMAND, PACKET_SYNC and PACKET_CHAT)



* Client1 = one client
* ClientX = all clients connected
* Server = server

{| border="1"
|+ Network Protocol
|-
! Packet name !! From whom !! To whom !! Params !! Information
|-
|PACKET_CLIENT_GAME_INFO || Client1 || Server || <none> || Requests info about the server (current game/players/password protected)
|-
|PACKET_SERVER_GAME_INFO || Server || Client1 || GameInfo || Sends the info of the server
|-
|PACKET_CLIENT_JOIN || Client1 || Server || UserName / GamePassword || Request to join the server (with a username and a gamepassword if needed)
|-
|PACKET_SERVER_ERROR || Server || Client1 || ErrorCode || ErrorCode (login denied, kicked, stuff like that)
|-
|PACKET_SERVER_WELCOME || Server || Client1 || Other player info || Info about other players, MOTD
|-
|PACKET_CLIENT_GETMAP || Client1 || Server || <none> || The client wants the map of the server
|-
|PACKET_SERVER_MAP || Server || Client1 || Savegame || The savegame of the current map (multiple packages)
|-
|PACKET_CLIENT_MAP_OK || Client1 || Server || <none> || The client received the map correctly and is ready to join
|-
|PACKET_SERVER_JOIN || Server || ClientX || Playername || Player joins the game
|-
|PACKET_SERVER_SYNC || Server || ClientX || RandomSeed || The server sends the random-seeds to the client for a certain frame
|-
|PACKET_CLIENT_COMMAND || Client1 || Server || Command, p1, p2 || The clients sends a DoCommand to the server
|-
|PACKET_SERVER_COMMAND || Server || ClientX || Command, p1, p2, player, frame || The server says when to execute a certain DoCommand
|-
|PACKET_CLIENT_CHAT || Client1 || Server || String, Player || Chat message (player == 255 means all clients)
|-
|PACKET_SERVER_CHAT || Server || ClientX || FromPlayer, string || Chat message
|-
|PACKET_CLIENT_QUIT || Client1 || Server || Reason || The client wants to quit the server
|-
|PACKET_CLIENT_ERROR || Client1 || Server || ErrorNo || The client made an error and is going to be disconnected. Inform the server about it (OpenTTD crash / DeSync)
|-
|PACKET_SERVER_QUIT || Server || ClientX || Player, reason || A player left the game (also sent to the quiting player)
|-
|PACKET_SERVER_SHUTDOWN || Server || ClientX || Reason || The server shuts down with a given reason, all clients are disconnected shortly after this
|-
|PACKET_SERVER_NEWGAME || Server || ClientX || <none> || The server loaded a new game (or loaded an old game, it is just the same). The clients need to send a PACKET_CLIENT_GETMAP after this to receive the new map and rejoin
|}