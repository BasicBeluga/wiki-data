[[Translation:en/Archive/Source/OpenTTDDevBlackBook/Format of langfiles]]
[[Category:en/Development]]

== General Layout ==

Each entry of the langfile consits of exactly one line.

An entry is either translation, a pragma or a comment.

If you use the web translator tool, you only see translations.


The encoding is ISO-8859-15.

== Translations ==

Translations consist of a key and a translation. They are separated by a colon (:).

=== Keys ===

The key can only contain uppercase letters, numbers and the underscore (_). Each key starts with "STR_" followed by one or more well describing words.

 STR_MAPSIZE
 STR_000F_PASSENGERS
 STR_SORT_BY_DATE
 STR_0196_SHOW_LAND_OWNERS_ON_MAP

=== Translations ===

Translations can contain any (CHECK!) ISO-8859-15 characters.

Using curly braces {}, special commands can be inserted into the translations, which are substituted either by strgen or while the string is drawn on the screen.

{| border=1
|+ '''Character Replacements'''
|-
!Command !!Replaced by
|-
|{} || Linebreak
|-
|{{} || Opening curly brace
|-
|{UPARROW} || &uarr;
|-
|{DOWNARROW} || &darr;
|-
|{SMALLUPARROW} || Small arrow up
|-
|{SMALLDOWNARROW} || Small arrow down
|-
|{RIGHTARROW} || &rarr;
|-
|{NBSP} || Non-Breakable space
|-
|{CENT} || &cent;
|-
|{EURO} || &euro;
|-
|{POUNDSIGN} || &pound;
|-
|{YENSIGN} || &yen;
|-
|{COPYRIGHT} || &copy;
|-
|{REGISTERED} || &reg;
|-
|{CHECKMARK} || &radic;
|-
|{CROSS} || Big cross
|-
|{TRAIN} || Symbol for train
|-
|{LORRY} || Symbol for lorry
|-
|{BUS} || Symbol for bus
|-
|{PLANE} || Symbol for airplane
|-
|{SHIP} || Symbol for ship
|}


{| border=1
|+ '''Visual attribution'''
|-
!Command !! Replaced by
|-
|{TINYFONT} || text is drawn in smaller font
|-
|{BIGFONT} || text is drawn in bigger font
|-
|{SETX ''nn''} || text starts at position ''nn''
|-
|{SETXY ''nn'' ''mm'} || text starts at position ''nn''/''mm''
|-
|{BLUE} || text is drawn in blue
|-
|{SILVER} || text is drawn in silver
|-
|{GOLD} || text is drawn in gold
|-
|{RED} || text is drawn in red
|-
|{PURPLE} || text is drawn in purple
|-
|{LTBROWN} || text is drawn in light brown
|-
|{ORANGE} || text is drawn in orange
|-
|{GREEN} || text is drawn in green
|-
|{YELLOW} || text is drawn in yellow
|-
|{DKGREEN} || text is drawn in dark green
|-
|{CREAM} || text is drawn in cream
|-
|{BROWN} || text is drawn in brown
|-
|{WHITE} || text is drawn in white
|-
|{LTBLUE} || text is drawn in light blue
|-
|{GRAY} || text is drawn in gray
|-
|{DKBLUE} || text is drawn in dark blue
|-
|{BLACK} || text is drawn in black
|}

Param replacement is done in the game, filling placeholder in the strings with names, numbers or strings.

{| border=1
|+ '''Param Replacement'''
|-
!Command !! Replaced by
|-
|{COMMA} || a number with comma
|-
|{NUM} || a signed number
|-
|{STRING} || a single string
|-
|{STRING''n''} || a string, which in turn consumes n parameters (1<=n<=5)<br>This is a special case, '''only''' to be used in '''english.txt'''.  In any other language, {STRING} should be used instead
|-
|{COMPANY} || company name
|-
|{PLAYERNAME} || player name
|-
|{VEHICLE} || vehicle name
|-
|{TOWN} || town name
|-
|{STATION} || station name
|-
|{WAYPOINT} || waypoint name
|-
|{INDUSTRY} || industry name (e.g. ''London Coal Mine'')
|-
|{CARGO} || cargo in long form: number, unit and type (e.g. ''12 tons of steel'')
|-
|{SHORTCARGO} || cargo in short form: only number and unit (e.g. ''12 tons'')
|-
|{VOLUME} || a number extended by ''litres''
|-
|{VELOCITY} || a number with the unit of speed (e.g. ''120 mph'')
|-
|{CURRENCY} || a number extended with currency symbols
|-
|{CURRENCY64} || a 64-bit number extended with currency symbols
|-
|{CURRCOMPACT} || a compacted number extended by currency symbols
|-
|{CURRCOMPACT64} || a compacted 64-bit number extended by currency symbols
|-
|{DATE_TINY} || a date in the format dd-mm-yyyy (e.g. ''25-12-1975'')
|-
|{DATE_SHORT} || a date in the form mmmm yyyy (e.g. ''Decembre 1975'')
|-
|{DATE_LONG} || a date in the format dd. mmm yyyy (e.g. ''12th Dec 1975'')
|-
|{STATIONFEATURES} || small icons of the supported vehicle types of a specific station
|-
|{REV} || the openttd revision number
|-
|{SKIP} || nothing (removes one param from the param list without printing it)
|-
|{P * * * *} || plural form (* stands for any string that can be quoted with " character, there can be up to 4 *s)<br>
See List of plural-types
|-
|{G ...} || *see below*
|}

Parameter replacements can be made swappable too.  This will alow one parameter that is usually at position 0 (as in : the first one ) in the translated string to be used in fact at position 1, thus swapping place with no 1.<BR>
As an example : STR_INDUSTRY_PROD_GOUP.<BR>
In english, the string reads as "{BLACK}{BIGFONT}'''{STRING}''' production at '''{INDUSTRY}''' increases {COMMA}%!"<BR>
In finnish, same string is now "{BLACK}{BIGFONT}'''{1:INDUSTRY}''' tuottaa '''{0:STRING}''' {2:COMMA}{NBSP}% entistä enemmän!"<BR>

{{en/Todo}} Finish and correct this<BR>

== Cases ==

After each key, there can be a custom suffix case separated by the period (.). The case must be defined first at the beginning of the file by ##case pragma.

{{en/Todo}} What language is that? Add more examples of real life usage (like "This is STR_0011_MAIL", but "I need STR_0011_MAIL.2")
 
Examples:
 ##case 2 upper

 STR_0011_MAIL        :posta
 STR_0011_MAIL.2      :posty
 STR_0011_MAIL.upper  :Posta

Usage:
 {STRING.2}
Use the cases to make pseudo-keys. It's a big enhancement for languages containing declension, where words are different depending on context.

{{en/Todo}} Look at it and correct where it's wrong

== Prular form ==
==== Introduction ====
In most languages singular and prular forms are a bit different.
Every word may be divided into two parts - one part does not change in both singular and prular form, but the second part differs in singular and prular. Let's call them '''core''' and '''suffix'''.

Let's take basic example in English language, which is basic because it has two forms: singular and prular.<br>
There is "'''1 train'''", but there are "'''2 trains'''".<br><br>
Now, let's divide this word into part that does not change and part that changes:<br>
*Core: "'''train'''"
*Suffix for singular: ""
*Suffix for prular: "'''s'''"
==== Writing the string ====
As I said before, there are two forms in English language.<br>
The basic structure for prular form in English is <pre>core{P suffix1 suffix2}</pre>where suffix1 is suffix for signular and suffix2 is suffox for prular.<br>
Keep in mind, that prular forms work only if there is proper param in the string.<br>
{COMMA} and {NUM}, along with other numberic params work well in determining prular form.<br>
Let's make a string that displays number of lamps in the room. Form of "lamp" would depend on supplied amount via {NUM} param.
==== Example ====
<pre>STR_SENTENCE : I have {NUM} lamp{P "" s}</pre>
Do you see the core? Yes, it is the word '''lamp'''.<br>
Later you see '''{P'''. This is the indicator that suffixes will come next.<br>
'''""''' means there is no suffix. OpenTTD needs to know that - If there is no suffix, just write two quotation marks. So this is the first suffix, which will be used when {NUM} is equal to 1<br>
'''s''' is the second suffix. This one will be displayed when {NUM} is bigger than 1.<br>
<br>
Let's proceed to more advanced prular forms. Let's take '''mouse'''. It's prular form is '''mice'''.<br>
First of all, imagine the sentence with different params.
*1 - Mum, there is 1 mouse in the room!
*3 - Mum, there are 3 mouses in the room!
*23 - Mum, there are 23 mouses in the room!
When you are ready, you can write the string.
<pre>STR_SENTENCE : Mum, there {P is are} {NUM} m{P ouse ice} in the room!</pre>
Nice one, isn't it?
==== OpenTTD usage ====
Now you understand basics of prular forms. Let's take some example from english translation.
<pre>STR_QUANTITY_LIVESTOCK : {COMMA} item{P "" s} of livestock</pre>This text is being displayed at stations when there is livestock cargo awaiting.<br>
As you can see, {COMMA} param is given. Thanks to that param, we can change form of '''item'''.
Let's see how would the string change when we change supplied param
*1 - 1 item of livestock
*4 - 4 items of livestock
*56 - 56 items of livestock
<br>
Now let's take a look at string without given param.<pre>STR_WAGONS : Wagons</pre>No prular form may be applied here. Wagon{P "" s} will not work here.<br>
Why? Because there is no param given.<br>
You can just leave this string as it is.
==== Other prular types ====
Find your language on '''List of plural-types''' table below. Languages are being groupped depending on behaviour of words with different amounts<br>
Suffixes are being ordered ascending, with ''any other number'' at end:<br><br>
*First suffix is always singular.
*Second suffix may be for ''any other number'' (English), or depending on your language, for other numbers. For example in Polish language the second form applies for numbers that end with 2, 3 or 4, .but excluding -teen numbers.
*If the second suffix was not for ''any other number'', the third one is for ''any other number''.

Let's take Polish language and invent some dummy string
<pre>STR_CARS : {NUM} aut{P o a ""}</pre>
Now take a look at description above, and guess how would the string look for {NUM} equal to 1, 2, 5, 13, 23, 38?
*1 auto (first suffix used)
*2 auta (second suffix used - number ends with 2, 3 or 4)
*5 aut  (third suffix used - ''any other number'')
*13 aut (third suffix used - second suffix excludes -teen numbers)
*23 aura (second suffix used - number ends with 2, 3 or 4)
*38 aut (third suffix used - ''any other number'')

== Genders ==
{{en/Todo}} MeusH will write it soon.
== Pragmas ==

Pragmas start with two hash signs (#).

{| border=1
|+ '''Pragmas'''
|-
!Name !! Function
|-
|name ''name''|| Name of the language in English
|-
|ownname ''name''|| Name of the language in the language itself
|-
|isocode ''code''|| ISO code for the '''language''' (eg. ''de'')
|-
|plural ''number''|| Type of the plural forms
|-
|gender ''up to 8 gender names''|| defines genders
|-
|case ''up to 50 case names''|| define cases
|-
|id ''hexnumber'' || Next string id starts at ''hexnumber''
|-
|}


{| border=1
|+ '''List of plural-types'''
|-
! rowspan="2"| Nr. !! Description !!
|-
! Used for
|-
| rowspan="2"| 0 || Two forms, singular used for one only 
|-
| Danish, Dutch, English, German, Norwegian, Swedish, Estonian, Finnish, Greek, Hebrew, Italian, Portuguese, Spanish, Esperanto
|-
| rowspan="2" | 1 || Only one form
|-
| Hungarian, Japanese, Korean, Turkish
|-
| rowspan="2" | 2 || Two forms, singular used for zero and one
|-
| French, Brazilian Portuguese
|-
| rowspan="2" | 3 || Three forms, special case for zero
|-
| Latvian
|-
| rowspan="2" | 4 || Three forms, special case for one and two
|-
| Gaelige (Irish)
|-
| rowspan="2" | 5 || Three forms, special case for numbers ending in 1[2-9]
|-
| Lithuanian
|-
| rowspan="2" | 6 || Three forms, special cases for numbers ending in 1 and 2, 3, 4, except those ending in 1[1-4]
|-
| Croatian, Czech, Russian, Slovak, Ukrainian
|-
| rowspan="2" | 7 || Three forms, special case for one and numbers ending in 2, 3, or 4, except those ending in 1[2-4]
|-
| Polish
|-
| rowspan="2" | 8 || Four forms, special case for one and all numbers ending in 02, 03, or 04
|-
| Slovanian
|}

<pre>
##name English
##id 0x1000
</pre>

== Comments ==

Comments start either with one or more than two hash signs (#) or with a semicolon (;). Empty lines are ignored too.

<pre>
# Ignore
#### Ignore this
;and this too
</pre>