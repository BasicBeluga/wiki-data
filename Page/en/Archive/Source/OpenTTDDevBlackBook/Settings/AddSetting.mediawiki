[[Translation:en/Archive/Source/OpenTTDDevBlackBook/Settings/AddSetting]]
{{en/Development/Navigation}}

This is a guide on creating patch settings that the user can manipulate and saving them into the config file. This article does '''not''' cover creating a new window.

==About save games==
The savegame holds the map and the data needed to continue a game. Which variables are saved are controlled by data CHUNKs, usually defined in files under the saveload folder.

The game settings are saved in chunks defined in settings.h. Search for the variable <code>const SettingDesc _settings[]</code>.

==About Patch Settings==
The patch settings are grouped into areas - but this is just for clarity of reading. Generally minor single line settings get squeezed into their appropriate position in the list. Larger groups of settings are added at the end of the list (somewhere after YAPF options).

Patch settings can be saved in up to three different locations (currently); a single player game, a network game, and the config.cfg file. This is controlled by one of the values given for each of the patch settings.

====Current Patch Categories====
The patch categories can be seen from the advanced settings window, so they're easily recognizable.

*[[en/Archive/Manual/Settings/Advanced Settings/Interface|Interface]] - General interface options such as toolbar options and main window options.
*[[en/Archive/Manual/Settings/Advanced Settings/Construction|Construction]] - Options dealing with what and how you can construct things.
*[[en/Archive/Manual/Settings/Advanced Settings/Vehicles|Vehicles]] - Options dealing with vehicle behavior.
*[[en/Archive/Manual/Settings/Advanced Settings/Stations|Stations]] - Options dealing with station behavior.
*[[en/Archive/Manual/Settings/Advanced Settings/Economy|Economy]] - Options dealing with the economy.
*[[en/Archive/Manual/Settings/Advanced Settings/Competitors|Competitors]] - Options dealing with AI competitors.

NOTE: This document does not cover how to create a new category.

==Adding a Patch Setting==
There are several files that you need to edit in order to add a patch setting.  This section lists those files and tells you what you need to do to each.  For the most part, you have to look at the surrounding code to figure out where the most appropriate place for your new patch variable to go, but unless you have a radically new idea, there will probably be a place for you.

====english.txt (and language files)====
First and foremost, you must add text entries into [http://svn.openttd.org/trunk/src/lang/english.txt english.txt] (all other language files are managed by the translators).  If you speak another language, you may also add your entries into that file in your patch.  For any other languages, just leave them and somebody will eventually translate it for you.

Take a look at the link above to get a feel for the text file.  Any patch option strings should begin with the STR_CONFIG_SETTING_ extension.  

<pre>
STR_CONFIG_SETTING_MY_VAR_OPT          :{LTBLUE}My variable option: {ORANGE}{STRING2} 
STR_CONFIG_SETTING_MY_VAR_OPT_HELPTEXT :My helptext that describes the setting
STR_CONFIG_SETTING_MY_BOOL_OPT         :{LTBLUE}My boolean option {ORANGE}{STRING2}
STR_CONFIG_SETTING_MY_VAR_OPT_HELPTEXT :My helptext that describes the setting
</pre>

Note that there are no tabs in this file, only spaces.

====settings_type.h====
There are several structures that keep track of the current configuration. They are named after each setting category. They are located in [http://svn.openttd.org/trunk/src/settings_type.h settings_type.h].

Find an appropriate structure for your patch setting and add a line similar to that shown here:

<pre>
	uint8 my_var_opt;	///< *Describe what my_var_opt is about*
	bool my_bool_opt;	///< *Describe what my_bool_opt is about*
</pre>

====settings_gui.cpp====
You must also define a string that contains your variable name for the purposes of saving and loading from the [[en/Archive/Manual/Settings/Openttd.cfg]] file.  These are defined in [http://svn.openttd.org/trunk/src/settings_gui.cpp settings_gui.cpp].

There is one array of strings defined for each category (described above) for organization purposes:

*_settings_ui[]
*_settings_construction[]
*_settings_stations[]		
*_settings_economy[]
*_settings_ai[]
*_settings_vehicles[]

You must define your string in the most appropriate one:

<pre>
	SettingEntry("my_var_opt"),
	SettingEntry("my_bool_opt"),
</pre>

====settings.ini====
The last change you have to make determines the behaviour of the Configure Patches window and exactly how your setting will be saved to [[en/Archive/Manual/Settings/Openttd.cfg]].  This is set with an entry in [http://svn.openttd.org/trunk/src/table/settings.ini settings.ini].

You can choose from a wide range of data types - each of them with different attributes. Below we'll take a look on SDT_VAR and SDT_BOOL - the two most common. The list below is not complete - for all attributes, look for [templates] near the top of the file.



 [SDT_VAR]
 base     = GameSettings
 var      = my_var_opt
 type     = SLE_UINT8
 from     = 161
 to       = SL_MAX_VERSION
 flags    = 0
 def      = 100
 min      = 10
 max      = 100
 interval = 5
 str      = STR_CONFIG_SETTING_MY_VAR_OPT
 strhelp  = STR_CONFIG_SETTING_MY_VAR_OPT_HELPTEXT
 strval   = STR_JUST_INT
 proc     = NULL

 [SDT_BOOL]
 base     = GameSettings
 var      = my_bool_opt
 flags    = SLF_NOT_IN_SAVE | SLF_NO_NETWORK_SYNC
 def      = true
 str      = STR_CONFIG_SETTING_MY_BOOL_OPT
 strhelp  = STR_CONFIG_SETTING_MY_BOOL_OPT_HELPTEXT
 proc     = NULL

If not specified, default values are used:

 [defaults]
 flags    = 0
 guiflags = 0
 interval = 0
 str      = STR_NULL
 strhelp  = STR_CONFIG_SETTING_NO_EXPLANATION_AVAILABLE_HELPTEXT
 strval   = STR_NULL
 proc     = NULL
 load     = NULL
 from     = 0
 to       = SL_MAX_VERSION
 cat      = SC_ADVANCED

Try to find a natural place in the file for your settings. 

Following is a detailed explanation of some of the attributes:

=====Patch Setting Types=====

* '''base''': GameSettings
* '''var''': The variable name
* '''type''': data size for the variable - not required for BOOL, but can be a variety of sizes; SLE_UINT8, SLE_INT16, SLE_UINT32, etc.   etc... pick what you need
* '''flags''': this is the most awkward to understand, and is quite cryptic. It can take the following values:
** '''SLF_NOT_IN_SAVE''' - do not save with savegame, basically client-based
** '''SLF_NOT_IN_CONFIG''' - do not save to config file
** '''SLF_NO_NETWORK_SYNC''' - do not synchronize over network (but it is saved if SLF_NOT_IN_SAVE is not set)
** '''SLF_ALLOW_CONTROL''' - allow control codes in the strings
** '''SLF_ALLOW_NEWLINE''' - allow new lines in the strings
* '''guiflags''': Affects how the option is displayed
** '''SGF_0ISDISABLED''' - The feature is disabled (greyed out)
** '''SGF_DISPLAY_ABS''' - display absolute value of the setting
** '''SGF_MULTISTRING''' - the value represents a limited number of string-options (internally integer)
** '''SGF_NETWORK_ONLY''' - this setting only applies to network games
** '''SGF_CURRENCY''' - the number represents money, so when reading value multiply by exchange rate
** '''SGF_NO_NETWORK''' - this setting does not apply to network games; it may not be changed during the game
** '''SGF_NEWGAME_ONLY''' - this setting cannot be changed in a game
** '''SGF_SCENEDIT_TOO''' - this setting can be changed in the scenario editor (only makes sense when SGF_NEWGAME_ONLY is set)
** '''SGF_PER_COMPANY''' - this setting can be different for each company (saved in company struct)
* '''def''': default value (true or false for BOOL, any valid value for VAR)
* '''min''', '''max''', '''interval''': min value, max value and interval by which integer value increments/decrements when using the yellow arrows (only applicable to VAR, obviously) 
* '''str''': the string used in the language file for the patch setting when displayed in the Patch Settings control panel. If you don't need to display it, just leave it as NULL.
* '''strhelp''': the help string displayed when selecting the option in the menu.
* '''strval''': What kind of value a SDT_VAL is. There are several options, but the most common are:
** '''STR_JUST_INT''' - integer
** '''STR_JUST_COMMA''' - float
* '''proc''': the procedure to call when the value is changed.
*'''from''', '''to''': Range of OpenTTD versions for which the setting is valid (see below)
* '''cat''': Which category the setting belongs to. Defines if the setting is shown based on if basic, advanced or expert filtering is chosen in the filtering in the advanced settings menu.
** SC_BASIC
** SC_ADVANCED
** SC_EXPERT

=====SAVEGAME_VERSION=====

If you don't use the flag '''SLF_NOT_IN_SAVE''', OpenTTD will expect to find your variable in every savegame. Therefore, it's important to tell the game from which version this setting was added. The savegame version number is found near the start of [http://svn.openttd.org/trunk/src/saveload/saveload.cpp saveload.cpp]. 

When OTTD loads a data chunk, it compares the savegame version it was compiled with, with the savegame version in the savegame. By checking the '''<to>''' and '''<from>''' attributes in the patch settings, it can see whether it supports the feature, and how to handle it.

This way, you can control whether your feature is saved, and if it is, whether that save is compatible with previous versions.

'''Note:''' If you define any variables without the '''SLF_NOT_IN_SAVE''' flag in the settings, all saves made on your build will be incompatible with all other versions of OpenTTD. 

To allow the opposite (load old games using your build), you'll have tell OpenTTD that you've introduced a new feature, and ''increase the savegame version''. If the current trunk is at version 160, and you have a new feature that to be saved along with the savefile, simply increase the savegame version. This is known as a '''Savegame BUMP'''.

When a normal build of OTTD tries to load a savegame from your system, it will see the savegame bump, and gracefully say ''Sorry, I cant load that - it's too new for me"''.

However, when loading a game with a savegame version lower than the specified in your '''from''' attribute in your setting - OpenTTD will know that it wont find that setting in the savefile, and loading should go succeed.

So for our example above, we bump the savegame to 161, set '''from''' to 161 and '''to''' to '''SL_MAX_VERSION'''.


[[Category:en/Archive/Source/OpenTTDDevBlackBook|P]]
[[Category:en/Development]]