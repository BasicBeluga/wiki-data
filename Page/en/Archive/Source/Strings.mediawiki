[[Translation:en/Archive/Source/Strings]]
{{en/Development/Navigation}}

This page is about the strings/language from a developers point of view. When you want to translate, please look at [[en/Archive/Source/OpenTTDDevBlackBook/Format of langfiles]] for a more in-depth article about translating and how to support for example genders and plurals.

You add a new string by adding a line to '''"english.txt"'''. This should happen at the place where it belongs with the other strings around. Keep in mind that sometimes OpenTTD uses special code for the numbering of strings. For example you SHOULD NOT put anything else in between the dates: ''"1st"'', ''"2nd"''... ''"31st"''. These strings are '''not''' called by their name, but iterated through from within the code with a counter. '''Keep this in mind!'''

==Adding Strings==
You add a string by giving it an identifier, something starting with ''"STR_"'' then a number of spaces later a colon ":" and then the string itself. For example:
<pre>STR_01A1_IS_GETTING_VERY_OLD   :{WHITE}{STRING} {COMMA} is getting very old</pre>
The strings enclosed in "{}"'s are special character strings that are interpreted by the game. As you might have guessed, "{WHITE}" gives the string a white colour.

==List of special strings==
{| border="1" width="300"
|-
! colspan = 2| Font and color (default size is medium)
|-
| '''Command''' || '''Description'''
|-
| <tt>{TINYFONT}</tt> || switch to tiny font
|-
| <tt>{BIGFONT}</tt> || switch to big font
|-
| nowrap| 
<tt>{BLACK} &nbsp;{WHITE}<br>
{RED} &nbsp;&nbsp; {GREEN}<br>
{BLUE} &nbsp; {YELLOW}<br>
{ORANGE} {PURPLE}<br>
{GRAY} &nbsp; {BROWN}<br>
{SILVER} {GOLD}<br>
{CREAM} &nbsp;{LTBLUE}<br>
{DKBLUE} {DKGREEN}<br>
{LTBROWN}</tt>
| Change the colour of the string, or the part of string until overridden by another colour to this colour.
|}
{| border = "1"
!colspan="2"| Special characters
|-
| '''Command''' || '''Description'''
|-
| <tt>{}</tt> || Go to the next line
|-
| <tt>{NBSP}</tt> || non-breaking space
|-
| <tt>{{}</tt> || {
|-
| <tt>{POUNDSIGN}</tt> || £
|-
| <tt>{YENSIGN}</tt> || ¥
|-
| <tt>{COPYRIGHT}</tt> ||| ©
|-
| <tt>{UPARROW}</tt> || ↑
|-
| <tt>{DOWNARROW}</tt> || ↓
|-
| <tt>{RIGHTARROW}</tt> || →
|-
| <tt>{SMALLUPARROW}</tt> || small ↑
|-
| <tt>{SMALLDOWNARROW}</tt> || small ↓
|-
| <tt>{CHECKMARK}</tt> || (a checkmark)
|-
| <tt>{CROSS}</tt> || (an X, used for closing windows)
|-
| <tt>{TRAIN}</tt> || icon of a train
|-
| <tt>{LORRY}</tt> || icon of a lorry / truck
|-
| <tt>{BUS}</tt> || icon of a bus
|-
| <tt>{PLANE}</tt> || icon of a plane
|-
| <tt>{SHIP}</tt> || icon of a ship
|}
{| border = "1"
!colspan="3"| Formatted Numbers
|- 
| '''Command''' || '''Number of Params used''' || '''Description'''
|-
| <tt>{NUM}</tt> || 1 || show a 32-bit signed integer number, e.g. 1600
|-
| <tt>{COMMA}</tt> || 1 || show a 32-bit signed integer number with a thousands separator, e.g. 14,000
|-
| <tt>{CURRENCY}</tt> || 1 || number as a currency, e.g. € 230,000
|-
| <tt>{CURRCOMPACT}</tt> || 1 || short version of currency (used in graphs)
|-
| <tt>{DATE_TINY}</tt> || 1 ||  tiny date version, e.g. 01-07-2004
|-
| <tt>{DATE_SHORT}</tt> || 1 ||  short date version, e.g. February 2004
|-
| <tt>{DATE_LONG}</tt> || 1 ||  long date version, e.g. 25th February 2004
|-
| <tt>{FORCE}</tt> || 1 || show number as force, e.g. 1500kN
|-
| <tt>{POWER}</tt> || 1 || show number as power, e.g. 6000HP
|-
| <tt>{VELOCITY}</tt> || 1 || show number as speed, e.g. 120km/h or 195mph
|-
| <tt>{VOLUME}</tt> || 1 || show number as volume, e.g. 1,000 litres
|-
| <tt>{VOLUME_S}</tt> || 1 || show number as volume, e.g. 1,000L
|-
| <tt>{WEIGHT}</tt> || 1 || show number as weight, e.g. 1,000 tonnes
|-
| <tt>{WEIGHT_S}</tt> || 1 || show number as weight, e.g. 1,000T
|-
| <tt>{CARGO}</tt> || 2 || show number as cargo, e.g. 950 tonnes of Coal
|-
| <tt>{SHORTCARGO}</tt> || 2 || number with cargo units, e.g. 950 tonnes
|}
{| border = "1"
!colspan="3"| Formatted Strings (given an index)
|-
| '''Command''' || '''Number of Params used''' || '''Description'''
|-
| <tt>{STRING}</tt> || 1 || get a string without parameters from an index
|-
| <tt>{STRING1}</tt> || 2 || get a string with 1 parameter
|-
| <tt>{STRING2}</tt> || 3 || get a string with 2 parameters
|-
| <tt>{STRING3}</tt> || 4 || get a string with 3 parameters
|-
| <tt>{STRING4}</tt> || 5 || get a string with 4 parameters
|-
| <tt>{STRING5}</tt> || 6 || get a string with 5 parameters
|-
| <tt>{COMPANY}</tt> || 1 || get the company name pointed to by this index
|-
| <tt>{PLAYERNAME}</tt> || 1 || get the player name pointed to by this index
|-
| <tt>{STATION}</tt> || 1 || get the station name pointed to by this index
|-
| <tt>{TOWN}</tt> || 1 || get the town name pointed to by this index
|-
| <tt>{INDUSTRY}</tt> || 1 || get the industry name pointed to by this index
|-
| <tt>{WAYPOINT}</tt> || 1 || get the waypoint name pointed to by this index
|-
| <tt>{VEHICLE}</tt> || 1 || get the vehicle name pointed to by this index
|-
| <tt>{GROUP}</tt> || 1 || get the vehicle group name pointed to by this index
|-
| <tt>{ENGINE}</tt> || 1 || get the engine name pointed to by this index
|-
| <tt>{SIGN}</tt> || 1 || get the sign name pointed to by this index
|-
| <tt>{SKIP}</tt> || 1 || Use up a parameter but do nothing with it
|}
{{en/Note|The commands <code>{STRING'''x'''}</code> may lead to a nested resolution of commands. For details, refer to the section below}}
{| border = "1"
!colspan="3"| Special commands
|-
| '''Command''' || '''Number of Params used''' || '''Description'''
|-
| <tt>{P}</tt> || 0 || Plural modifier
|-
| <tt>{G}</tt> || 0 || Gender modifier
|-
| <tt>{REV}</tt> || 0 || OpenTTD revision string
|}

==Functions for Processing Variables==
===Example===
As you have seen before, you have to put these special modifiers into the string itself. Let us revisit the example from above:
<pre>STR_01A1_IS_GETTING_VERY_OLD   :{WHITE}{STRING} {COMMA} is getting very old</pre>
Both "STRING" and "COMMA" are variables. You set them up by calling the appropriate '''"SetDParam(uint n, uint32 v)"''' function. So for this one you would do:
<pre>SetDParam(0, _vehicle_type_names[v->type - 0x10]);
SetDParam(1, v->unitnumber);</pre>
Only after that you call the appropiate draw function, for example:
<pre>DrawStringRightAligned(x, y, STR_01A1_IS_GETTING_VERY_OLD, colour);</pre>
Both parameters of "STR_01.." have been set up, and you will get the info nicely on your screen.

===List of Functions===
Besides '''SetDParam(uint n, uint32 v)''' there are other '''SetDParam''xxx'' ''' functions available:
{| class="wikitable"
|-
! Signature 
! Description
! Example
! Remarks
|-
| <code>SetDParam(uint n, uint32 v)</code>
| Set the variable value at index ''n'' to value ''v''. 
| see above
| Depending on the variable used, the value is interpreted differently.
|-
| <code>SetDParamStr(uint n, const char *str)</code>
| Use the verbatim string ''str'' to apply it to the variable at index ''n''. 
| Assume that it is <code>STR_XYZ: Hello World - {RAW_STRING}</code> in ''english.txt'' and <code>STR_XYZ: Hallo Welt - {RAW_STRING}</code> in ''german.txt''. The coding <pre>char *hello = 'Hello World!';
SetDParamStr(0, hello);
DrawStringRightAligned(x, y, STR_XYZ, colour);
</pre> would produce <code>Hello World - Hello World!</code> in English and <code>Hallo Welt - Hello World!</code> in German.
| Note that ''str'' is being used in a verbatim manner, i.e. the variable value is printed "as is" without any translation lookup in between (typically used for providing non-translated names to variables). Only use <code>{RAW_STRING}</code> as variable!
|-
| <code>SetDParamMaxDigits(uint n, uint count)</code>
| '''available since [http://vcs.openttd.org/svn/changeset/24801/ r24801]''': Emulate the variable value at index ''n'', which is of an integer type, by creating a number which has ''count'' maximal-width digits.
| Assume that for the current font, the digit ''8'' is the digit with the largest font width. If you call <code>SetDParamMaxDigits(1, 4)</code>, this would be equivalent to calling <code>SetDParam(1, 8888)</code>.
| rowspan="2" | These functions are typically used when there is a need to guess the maximal width of a certain string, such as in '''UpdateWidgetSize'''. Make use of this function, if you know an upper boundary of your variable and calculating the exact value may be expensive, but you just need a "good guess" for the total width of your final string.
|-
| <code>SetDParamMaxValue(uint n, uint64 max_value, uint min_count = 0)</code>
| '''available since [http://vcs.openttd.org/svn/changeset/24801/ r24801]''': Emulate the variable value at index ''n'', which is of an integer type, by creating a number with as many maximal-width digits as ''max_value'' provides. If ''min_count'' is provided, ensure that at least ''min_count'' digits are created.
| Assume that for the current font, the digit ''8'' is the digit with the largest font width. If you call <code>SetDParamMaxValue(1, 1234)</code>, this would be equivalent to calling <code>SetDParam(1, 8888)</code>, because ''1234'' consists of four digits. If you call <code>SetDParamMaxValue(2, 123, 5)</code>, this would be equivalent to calling <code>SetDParam(2, 88888)</code>, because ''123'' has only three digits, but you requested to have five digits at minimum.
|}

===Nested Resolution Using {STRINGx} Commands===
Using the <code>{STRINGx}</code> commands, it is possible to trigger a nested resolution of strings. When using functions for processing variables, the indices are referencing in a ''top-to-bottom order'' whilst the leaf nodes are required to be in a ''left-to-right order''. 
Here is an example: Let the strings be defined as
<pre>
STR_A              : A
STR_X              : X
STR_Y              : Y
STR_TOP            : {STRING5}
STR_1ST_LEVEL      : {STRING1} / {STRING2}
STR_2ND_LEVEL_A    : {STRING}
STR_2ND_LEVEL_X    : {STRING} - {STRING} 
</pre>
To produce the output <code>A / X - Y</code> on drawing the string <code>STR_RECURSIVE</code> you have to set the variables like this:
<pre>
SetDParam(0, STR_1ST_LEVEL);
SetDParam(1, STR_2ND_LEVEL_A);
SetDParam(2, STR_A);
SetDParam(3, STR_2ND_LEVEL_X);
SetDParam(4, STR_X);
SetDParam(5, STR_Y);
DrawString(x, y, STR_TOP, colour);
</pre>
Moreover, note how <code>STR_TOP</code> is defined as <code>{STRING5}</code>: The first variable of <code>STR_1ST_LEVEL</code> requires space for two variables (the StringID of the string to show plus its single variable value). The second variable of <code>STR_1ST_LEVEL</code> requires space for three variables (the StringID of the string to show plus two additional variable values).

==Lifecycle==
The "source of truth" for the [https://www.wikipedia.org/wiki/Internationalization_and_localization i18n] strings is located in the text tables of the language files (that is for example "'''english.txt'''") only. This means that the [http://translator.openttd.org/en/ WebTranslator] is updated automatically based on the latest state available in ''trunk'' of the SVN repository. Therefore, it is safe to remove an entire entry from "english.txt" in case that you know that it is not used elsewhere anymore (NB: If you do not find the name of the string in any source code file, you cannot conclude that it is not used anymore). Make sure that you clean up the entry in all the other languages as well, as this is not done in ''trunk'' for you automatically. 

Moreover, speaking more generally, if you want to ''change'' an English original text, you need to think about the impact on the other languages as well. Here are some rules of thumb:
* If you are sure that your changes will affect all languages (also those which you do not speak) in the same way (for example, you want to change '''{RED}''' to '''{GREEN}'''), then go ahead and change it mechanically in all languages yourself. Don't wait for translators to adjust all other languages.
* If you cannot assess if your change will change things in other languages (for example, you changed a single word in the phrase) or if you know that it will change things for sure (for example, you changed the entire phrase), then do the change in English and delete all other translations of this string in the other text tables. For translators, it is much easier to find a missing translation than searching for a changed one! As SVN keeps a history, the original translation is not lost either and can be restored, if really necessary.<br /> Also for the current case, if you are sure for a certain language (for example, it is your mother tongue) how the translation needs to be adjusted, adjust it yourself. Still get rid of the other strings in the other languages which you do not know well enough. If in doubt, whether it is right what you are doing, do not change the entry, but remove it.


[[Category:en/Development]]