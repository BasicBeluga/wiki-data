[[Translation:en/Archive/Source/Strings]]
{{en/Development/Navigation}}

This page is about the strings/language from a developers point of view. When you want to translate, please look at [[en/Archive/Source/OpenTTDDevBlackBook/Format of langfiles]] for a more in-depth article about translating and how to support for example genders and plurals.

You add a new string by adding a line to '''"english.txt"'''. This should happen at the place where it belongs with the other strings around. Keep in mind that sometimes OpenTTD uses special code for the numbering of strings. For example you SHOULD NOT put anything else in between the dates: ''"1st"'', ''"2nd"''... ''"31st"''. These strings are '''not''' called by their name, but iterated through from within the code with a counter. '''Keep this in mind!'''

==Adding Strings==
You add a string by giving it an identifier, something starting with ''"STR_"'' then a number of spaces later a colon ":" and then the string itself. For example:
<pre>STR_01A1_IS_GETTING_VERY_OLD   :{WHITE}{STRING} {COMMA} is getting very old</pre>
The strings enclosed in "{}"'s are special character strings that are interpreted by the game. As you might have guessed, "{WHITE}" gives the string a white colour.

==What special strings are there?==
In the table below you will find most of them
{|
|align=center | '''MODIFIERS''' ||align=center | '''COMMANDSTRINGS'''
|-
| '''Position''' || Update the position of the text. Used for example to scroll text<pre>{SETX} {SETXY}</pre>
|-
| '''Font size''' || Change the size of the font. The default is medium.<pre>{TINYFONT} {BIGFONT}</pre>
|-
| '''Newline''' || Add a newline to your text.<pre>{}</pre>
|-
| '''Colour''' || Change the colour of the string, or the part of string until overridden by another colour to this colour.

{|style="font-family:monospace;"
| {BLUE}
| {SILVER}
| {GOLD}
| {RED}
|-
| {PURPLE}
| {LTBROWN}
| {ORANGE}
| {GREEN}
|-
| {YELLOW}
| {DKGREEN}
| {CREAM}
| {BROWN}
|-
| {WHITE}
| {LTBLUE}
| {GRAY}
| {DKBLUE}
|-
| {BLACK}
|
|
|
|}
|-
| '''Numbers''' || Show numbers.
{|
| <tt>{COMMA}</tt>
| show a 32-bit signed integer number with a comma as the thousands separator
|-
| <tt>{NUM}</tt>
| show a 32-bit signed integer number without thousands separators
|-
| <tt>{CURRENCY}</tt>
| number as a currency, eg € 230,000
|-
| <tt>{CURRCOMPACT}</tt>
| short version of currency (used in graphs)
|-
| <tt>{REV}</tt>
| OpenTTD revision string
|-
| <tt>{SHORTCARGO}</tt>
| short cargo description, only ### tons, or ### litres
|-
| <tt>{STRINL}</tt>
| ??
|-
| <tt>{DATE_LONG}</tt>
| long date version, e.g. 25th February 2004
|-
| <tt>{DATE_SHORT}</tt>
| short date version, e.g. February 2004
|-
| <tt>{VELOCITY}</tt>
| speed of vessel, e.g. 120km/h or 195mph
|-
| <tt>{SKIP}</tt>
| skip a parameter
|-
| <tt>{VOLUME}</tt>
| show number as a volume, e.g. 1,000 litres
|-
| <tt>{STRING}</tt>
| get the string pointed to by this index
|-
| <tt>{CARGO}</tt>
| show number as cargo, e.g. 950 tonnes
|-
| <tt>{STATION}</tt>
| get the station-name pointed to by this index
|-
| <tt>{TOWN}</tt>
| get the town-name pointed to by this index
|-
| <tt>{CURRENCY64}</tt>
| show a 64bit signed integer amount of money (no overflow)
|-
| <tt>{WAYPOINT}</tt>
| get the waypoint-name pointed to by this index
|}
|-
| '''Special characters''' || Show special characters, icons.
{|
| <tt>{UPARROW}</tt>
| ↑
|-
| <tt>{NBSP}</tt>
| non-breaking space
|-
| <tt>{POUNDSIGN}</tt>
| £
|-
| <tt>{YENSIGN}</tt>
| ¥
|-
| <tt>{COPYRIGHT}</tt>
| ©
|-
| <tt>{DOWNARROW}</tt>
| ↓
|-
| <tt>{CHECKMARK}</tt>
| (a checkmark)
|-
| <tt>{CROSS}</tt>
| (an X, used for closing windows)
|-
| <tt>{RIGHTARROW}</tt>
| →
|-
| <tt>{SMALLUPARROW}</tt>
| small ↑
|-
| <tt>{SMALLDOWNARROW}</tt>
| small ↓
|-
| <tt>{COMPANY}</tt>
| Colored box with company color
|}
|}

==How to use these?==
As you have seen before, you have to put these special modifiers into the string itself. Let us revisit the above example:
<pre>STR_01A1_IS_GETTING_VERY_OLD   :{WHITE}{STRING} {COMMA} is getting very old</pre>
Both "STRING" and "COMMA" are variables. You set them up by calling the appropriate '''"SetDParam(uint n, uint32 v)"''' function. So for this one you would do:
<pre>SetDParam(0, _vehicle_type_names[v->type - 0x10]);
SetDParam(1, v->unitnumber);</pre>
Only after this do you call the appropiate draw function, for example:
<pre>DrawStringRightAligned(x, y, STR_01A1_IS_GETTING_VERY_OLD, colour);</pre>
Both parameters of "STR_01.." have been set up, and you will get the info nicely on your screen. Good luck!

[[Category:en/Development]]