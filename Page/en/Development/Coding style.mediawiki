[[Translation:en/Development/Coding style]]
To achieve a coherent whole, here are some guidelines for the coding style used in OTTD.

* FunctionsLookLikeThis()
* Variable names/structure members are all lowercase, and may also contain _
* Variables are declared at the beginning of a block { }, as specified in ANSI-C89
** Never declare variables halfway a function or other block. This is especially for coders using gcc, since gcc won't complain, but MSVC does. Up till now, I have not found an option in MSVC to allow it, nor an option in gcc to forbid/warn for it.
* Local variable names should be short
* StructsLookLikeThis and get typedefed:
<pre>
 typedef struct foo {
   // stuff
 } foo;
</pre>
* Global variables start with a _
* Use 'const' and 'static' when possible
* ENUMS_LOOK_LIKE_THIS
* Use enums instead of #define
* Tab size is 2 spaces. Never use spaces as indentation.
* Style for if:
<pre>
 if (a == b) {
   foo();
 } else {
   bar();
 }
</pre>
: Alternatively:
<pre>
 if (a == b)
   foo();
</pre>

* don't treat non-flags as flags: if (char_pointer != NULL && *char_pointer != '\0') instead of if (char_pointer && *char_pointer)

* put a space before and after binary operators: a + b, a == b, a & b, a <<= b, etc.. Exceptions are ".", "->" and "[]" (no spaces) and "," (just space after it)

* space after "for", "if", "switch" and "while"

* { for a function starts at the second line.
<pre>
      FunctionsLookLikeThis(int i_am_a_variable)
      {
        code...
      }
</pre>

==Proposed amendment(s)==
* Each externally accessible function in a file should be documented in code by a comment which describes, at the minimum, the purpose, and any assumptions of the function. If it's not clear, the inputs and outputs of the function should also be documented.

* Use comments in your code. Comments should follow the javadoc style. A typical function comment sould  look like this:
<box><font color="#008800">/** <br>
&nbsp;* A short sentence explaining the basic utility of the function. (full stop terminated).<br>
&nbsp;* A more detailed explanation of the function, which can span multiple lines and can contain HTML code.<br>
&nbsp;* <br>
&nbsp;* @param foo Explanation of the parameter<br>
&nbsp;* @param bar Explanation of another parameter<br>
&nbsp;* @return The sum of foo and bar (This tag shouldn't be present if the function return type is void)<br>
&nbsp;* @see FooBar2(int,int) does substraction. (link to something else that might of interest)(optional)<br>
&nbsp;*/</font><br><font color="#0000FF"> static int</font> FooBar(<font color="#0000FF">int</font> foo, <font color="#0000FF">int</font> bar)<br>
{<br>
&nbsp;&nbsp;<font color="#0000FF">return</font> foo + bar;<br>
}
</box>

* You should also comment your global variables. There are two possible style (doxygen comment style):
<box><font color="#008800">/// Use this comment style if you whish to place the comment on top of the variable</font><br>
<font color="#0000FF">int</font> _foo;</box>or<br>
<box><font color="#0000FF">int</font> _foo;<font color="#008800">///< Use this Comment style if you whish to place the comment at the right of the variable</font></box>

* A typical struct comment should look like this:
<box><font color="#008800">/** A short description of the struct. (full stop terminated)<br>
&nbsp;* A more detailed description of usage.<br>
&nbsp;* @see link to anything of interest. (optional)<br>
&nbsp;*/</font><br>
<font color="#0000FF">typedef struct</font> foo{<br>
&nbsp;&nbsp;<font color="#0000FF">int</font> var1 <font color="#008800">///< a short description of var1</font><br>
&nbsp;&nbsp;<font color="#0000FF">int</font> var2 <font color="#008800">///< a short description of var2</font><br>
} foo;</box>

* Areas of interest or suggestions for improving the code should be marked as follows:
<box>
<font color="#0000FF">int</font> i = 6; <font color="#008800">// XXX - wtf is this magic number and what does it do? (single line)</font> 
</box>
or<br>
<box>
<font color="#008800">/** XXX - Awfull piece of code, must be <br>
&nbsp;* rewritten as soon as possible. Magic numbers should be <br>
&nbsp;* removed. What does it actually do?<br>
&nbsp;*/</font><br>
i = (_map5[tile] & 0x1F) - 4;<br>
<font color="#0000FF">if</font> (i >= 0) i = (i >> 2);<br>
bits = _vegetation_clear_bits[i + 4];
</box>