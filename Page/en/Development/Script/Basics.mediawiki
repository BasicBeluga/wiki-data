[[Translation:en/Development/Script/Basics]]
We assume that you read the [[en/Development/Script/Introduction|Introduction]], which explains how to add an AI to OpenTTD. This page will explain how to add some simple things to make your AI do something. The result is in the Example AIs.

==Naming your company==

Of course the first thing you want to do, is name your company. You want to promote yourself, won't you? To change your company name, you need to load up the AICompany class. This is located, for the C++ users, in src/ai/api/ai_company.hpp. Squirrel users are in luck, all classes are already loaded for you.

To load up the AICompany class, we need to assign an instance to it. We do this inside our AI class.

 class MyNewAI extends AIController {
   company = null;
   stop = false;
 
   constructor() {
     this.company = AICompany();
   }
 
   function Start();
   function Stop();
 }

For C++ it is okay to do it like this:

 class MyNewAI : public AIController {
 private:
   AICompany company;
 (..)

For Squirrel this is not possible for various of reasons. This might change in the future. Now we have the AICompany loaded, let's change our company name. The function to this is, is, as the API tells us, SetCompanyName. The parameter is a string. So we get:
 
 function MyNewAI::Start()
 {
   this.Sleep(1);
   this.company.SetCompanyName("MyNewAI");
 }
 
Now if you payed a bit of attention, you immediately notice that this goes against a rule you learn in the Introduction: the Start() returns, therefor your AI dies. But, this is just for illustration, so it will do fine for now. You might wonder why we need that Sleep(1). You need to know that it is not allowed to do any changes in the first tick (where GetTick() return 0). You can only use this to initialize things and read stuff from the map. So we sleep for 1 tick, and now we can change the name.

Start OpenTTD, start a new map, and see how your AI now makes the company name change of the new player to MyNewAI.

==Naming your company (advanced)==

But now what happens if your AI starts two times. You can't have two AIs with the same company-name. If you run it, you will see that the second name stays Unnamed. That sucks. Lucky we can check the result of the function if it went okay. So let's extend it a bit, and check the result. If it fails, let's find ourself an other name.

 function MyNewAI::Start()
 {
   this.Sleep(1);
   if (!this.company.SetCompanyName("MyNewAI")) {
     local i = 2;
     while (!this.company.SetCompanyName("MyNewAI #" + i)) {
       i = i + 1;
     }
   }
 }

What happens here, is that if naming the AI to 'MyNewAI' fails, it tries 'MyNewAI #2'. If that fails, it tries 'MyNewAI #3', etc etc. At some point it should work, or rather, that is the idea. So there you have it, your first AI that does something ingame.

==Message System==

The message system is a simple event-poll system. You will need to poll the event-controller once in a while to see if there are any relevant messages for you on the stack. Doing this is relative easy:

 while (AIEventController.IsEventWaiting()) {
   local e = AIEventController.GetNextEvent();
   switch (e.GetEventType()) {
     case AIEvent.AI_ET_CRASHED_VEHICLE:
       local ec = AIEventVehicleCrash.Convert(e);
       local v  = ec.GetVehicleID();
       print("We have a crashed vehicle (" + v + ")");
       /* Handle the crashed vehicle */
       break;
   }
 }

Of course you might not be interested in all events. For this you can use the event-filter system. Note: all events already on the stack are untouched at all times. The filter has 2 modes: disable-all and allow several, or enable-all and disallow several. By default the latter is used. You can change this via:

 AIEventController.DisableAllEvents();

To disable and enable a certain event, use:

 AIEventController.EnableEvent(AI_ET_CRASHED_VEHICLE);

For more functions we refer to the documentation.

==Now what?==

How to proceed next depends very much on what you want your AI to do. The best thing to do is to start browsing through the [http://devs.openttd.org/~truelight/aidocs/ API]. We suggest to start with a road-vehicle-only AI. We know it is really boring, but you can really make a lot of money with them, if done correctly. Also, it is much easier to create and understand then trains are. Ships and aircraft are also very doable, but more boring then road-vehicles.

For example, if you want to build road and road-stations, check AIRoad documentation. You will find the right functions there. For station information check AIStation. For vehicle-building and settings orders, check AIVehicle. Sounds all pretty logical, doesn't it?

Of course there are many things that makes your life easier. There is for example a piece of code that queues all your commands in a big list and starts executing them on request all at once. Now if one fails, where it didn't before, it rolls everything back. This is very useful from time to time, as when planning a route it might have looked to be no problem to build it, but by the time a road piece is placed, it can be that an other company has taken the tile already. Such pieces of code makes handling those situations a bit easier. Other examples are pathfinders, and more of those things.

[[Category:en/Development]]