[[Translation:en/Development/Script/Introduction]]
To start, there are two ways to make your AI. Either do it in C++, for which you need to be able to compile OpenTTD, or do it in Squirrel, a very simple and C++ like scripting-language. For an introduction into C++ we advise you to buy a good book in any book-store, for an introduction in Squirrel check the [[en/Development/Script/Squirrel|Squirrel Introduction]] page. '''We advise you to use Squirrel''', as you can reload your script runtime, which means you don't have to close, compile and start OpenTTD for every tiny change you make. The reason we picked Squirrel, is that it looks very similar to C++. Therefore, the rest of this documentation will not assume one, but both of them. Where examples are given, we will use Squirrel.

In this introduction we take you through the process of creating a basic AI. While doing so, we will explain to you the very basics you need to create an AI and an AI in OpenTTD. For advanced AI handling we suggest you to buy a good book. The end-result of this tutorial can be found back in the 'example' directories.

==Creating your own AI==

Of course you want to start with your own AI. The process is slightly different for C++ than Squirrel, so we'll handle them separately.

A general rule of the thumb is to write extensive documentation for your AI, so after a few days you can easily remember what the functions are supposed to do. Another way to help with this is to split the AI into smaller, logical files.

===C++===
* Create a new directory in src/ai (for example MyNewAI).
* Create a file called for example MyNewAI.cpp in the new directory. The extension of the file must be ".cpp".
* Add the files of your AI to source.list (for MSVC you have to run projects/generate or add the files manually).
* Open MyNewAI.cpp and continue reading the next section.

===Squirrel===
* Create a new directory in bin/ai (for example MyNewAI) (Windows: this is the /ai directory).
* Create a file called main.nut. This is important as the Squirrel loader looks for main.nut in all subdirectories.
* Open main.nut and then continue reading the next section.

==Register==

You want to let OpenTTD know you have an AI that wants to take over a company. For this, you need to add a class that extends AIFactory:

 class FMyNewAI extends AIFactory {
   function GetAuthor()      { return "Newbie AI Writer"; }
   function GetName()        { return "MyNewAI"; }
   function GetDescription() { return "An example AI by following the tutorial at http://wiki.openttd.org/"; }
   function GetVersion()     { return 1; }
   function GetDate()        { return "2007-03-17"; }
   function CreateInstance() { return "MyNewAI"; }
 }

What this does is tell OpenTTD how your AI is called, its version, and other general information. For C++ it is important that you return MyNewAI() in the CreateInstance. After this you need to create an instance of the class.
Squirrel:

 /* Tell the core we are an AI */
 iFMyNewAI <- FMyNewAI();

Or for C++:

 /* Tell the core we are an AI */
 static FMyNewAI iFMyNewAI;

This is enough to initialise your AI. But, we are not quiet there you to give it a first run. We don't have a real AI yet, only a piece of code that tells what your AI is, and who wrote it. So, let's make a class that will be our AI.

==Your First AI==

To do this, you need to extend AIController.

 class MyNewAI extends AIController {
   stop = false;
 
   function Start();
   function Stop();
 }
 
 function MyNewAI::Start()
 {
   while (!this.stop) {
     print("I am a very new AI with a ticker called MyNewAI and I am at tick " + this.GetTick());
     this.Sleep(50);
   }
 }
 
 function MyNewAI::Stop()
 {
   this.stop = true;
 }

The first block creates the class extending AIController. We initialise the value stop to 'false'. The second blocks creates a Start() functions, which is called once when your AI is started. If you exit from this function, your AI dies. Therefore we create a while() which only stops when the Stop() function sets the stop to 'true'. 
To avoid your AI eating up all the CPU of your computer (and thus stopping the game itself from running), it is wise to put something in the loop to delay the AI. You do this with the Sleep() command. You will see when we start this AI in a moment, that you get a print line in your console every 50 ticks.

So, let's start our AI. As AIs are currently picked randomly from all AIs that are registered, it can be a bit hard to get your AI started if you're just relying on chance. Later there will be added a GUI that can control this, but for now you have to start OTTD with the following arguments:

Linux etc
 ./openttd -a "MyNewAI"

Windows
 openttd.exe -a "MyNewAI"

Either that, or ensure there is only one AI in the ai directory.

Make sure to change your difficulty settings so that AIs start immediately, and add 1 or more AIs. Soon you will see a new company starting, hopefully with your AI attached. If you open the console ( '''`''' key) you will see a nice line printing we are active.

In case of C++, any errors you will see on compile-time. In case of Squirrel, you will see the compile-errors at startup, and run-errors when your AI is started. We suggest that you pay close attention to your console, as it can report useful information. Soon there will be a GUI for Squirrel errors, so it is easier for you to read.

So, there you have your first AI. Of course now we need to add functions. For this we advise you continue to the next chapter [[en/Development/Script/Basics|Basics]]. You only have to know that all your code should go in Start(). One more thing you should know: never create global variable. Keep everything in your class instance. But this is just a house-rule and if you don't know what it means, it doesn't really matter at this point.

[[Category:en/AI|I]]