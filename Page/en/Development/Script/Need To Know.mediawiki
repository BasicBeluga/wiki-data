[[Translation:en/Development/Script/Need To Know]]
===GetTick()===

When your Start() is called for the first time, GetTick() always returns 0. You can not do any action in that tick. Tick 0 is meant to initialize things, not to build things. After that, GetTick() isn't really important for you, or rather: shouldn't be important. It is just meant to give an indication of time, as we always find it useful to know when an AI spit out a message (was it ages ago, or was it recent). This said, you of course want to know when it's value changes.

Of course it changes when you do Sleep(), and with the exact value you specified in the Sleep(). But it also changes when you execute a command. This has to do that in networking it takes time to do something, and as you want to know if something really build, we have to wait till we get a signal back from the server. Now to make your life easier, we made singleplayer and multiplayer simular: they both delay. In singleplayer this is always 1 tick, unless you configured it with SetDelay(). In multiplayer it is at least 1 tick, but depends on the server-configuration. If you set SetDelay() lower than the server-configuration, the server-configuration wins, and else SetDelay() does.

So what does this mean:

 GetTick() -> 3
 SetCompanyName()
 GetTick() -> 4 (or higher)

As you might notice, you can't use GetTick() for anything else but debugging. It isn't a good indicator of time, it isn't usable to do something every 10 ticks or something, nothing of that. You will need to make such a system yourself.

===How to start only my AI?===

Of course when you are creating an AI, you don't want someone else's AI to start. This can be controlled currently only from command-line. You just give:

 ./openttd -a <yourAI>

And only yourAI will be active. To see which AIs OpenTTD can find, run:

 ./openttd --help

At the bottom it shows all the AIs it can find and detect as runable.

=== Map coordinates ===

Map (X, Y) coordinates are done from the top to the bottom - the top most tile is (0,0), the bottom most tile is (Max_X, Max_Y). X is increased by going SW, and Y increased by going SE. Any time a more then one tile dimension object is returned, it'll be the most top coordinate, tending towards the top right:

[[File:en/Development/Script/Ai-placed-coordinate-of-airport.png|frame|none|The AI placed this airport, using the top right most coordinate, which is also it's returned location. The airport size is X=4, Y=3]]

[[en/Development/Script/Lists|Lists]] when validating a set area via. AITile.IsBuildableRectangle (eg; a space for an airport) will return the top most square where it is minimum X and Y to fit the object in.

=== Loading and restarting AI's ===

The AI is loaded from any instance of a new game. There is no need to restart the game, abandoning the current level and starting again is usually the easiest method to restart the AI from a scratch map, or loading a scenario setup to be the same each time. The AI debug panel also can restart the individual AI's as noted below.

To start a specific AI from the command line (rather then have it randomly choose one from the available list) use:

 openttd.exe -a "ainame"

'''Note:''' This will not stop "start_ai anotherainame" from running in the developers console. However, using start_ai will alter the AI used for new competitors to the new AI.

To load a specific scenario immediately, use:

 openttd.exe -g relative/path/to/scenario.scn

See below for how to immediately start new specific AI's from the developers console.

=== Logging and Debug Panel ===

AI Debug panel is accessible from the Land Area Information (red question mark) labelled "AI Debug Console". At the moment it doesn't have a scroll functionality. All outputs of AILog.XXX() go to here, and can be selected per AI. The AI can also be restarted (resulting in a new Start() initialisation and nothing physically removed from the map) too.

[[File:en/Development/Script/Ai-debug-panel.png|frame|none|AI Debug Panel]]

==== Developer Console Usage ====

The console is accessed using the ` key (next to "1") on the keyboard, and appears in the top part of the screen. This can be scrolled by using the Shift + Page Up/Down.

To get a separate window (which cannot have inputs) use the -d parameter by itself (if you use the -d ai5 then two must be used) on a shortcut:

 openttd.exe -d

This provides this output:

[[File:en/Development/Script/Openttd -d.png|frame|none|Zuu's example of the developer console -d version outputting AI errors.]]

===== Compiling Errors =====

To see compilation errors of squirrel, the developer level of the game must be set to a minimum of 2. Do this in the console by using the command:

 developer 2

Which can be done in the main menu before AI's have loaded. To have this automated, use a script autoexec.scr in the scripts folder, containing the same line. Example output of this is given above, which allows errors to be found at run time.

===== Logging =====

print() statements and AILog.XXX() commands can be output to the developer console directly by:

 ./openttd -d ai5
 openttd.exe -d ai5

Or by inputting debug_level ai=5 in the console. This is more useful since the AI Debug panel doesn't scroll yet.

===== Starting an AI =====

To create an AI instance, use the command:

 start_ai nameofai

This will error if the AI cannot be loaded or the maximum (7) AI's are currently loaded, although will still add AI players if the difficulty settings are set to a lower maximum, or even zero. The nameofai part is case insensitive.

=== Resource Id's ===

To save delving into the source code since these are not in the API documentation, these are the standard resource Id's as used for [http://devs.openttd.org/~noai/aidocs/classAICargo.html cargo] in the game:

 // Temperate
 CT_PASSENGERS   =  0
 CT_COAL         =  1
 CT_MAIL         =  2
 CT_OIL          =  3
 CT_LIVESTOCK    =  4
 CT_GOODS        =  5
 CT_GRAIN        =  6
 CT_WOOD         =  7
 CT_IRON_ORE     =  8
 CT_STEEL        =  9
 CT_VALUABLES    = 10
 // Arctic
 CT_WHEAT        =  6
 CT_HILLY_UNUSED =  8
 CT_PAPER        =  9
 CT_GOLD         = 10
 CT_FOOD         = 11
 // Tropic
 CT_RUBBER       =  1
 CT_FRUIT        =  4
 CT_MAIZE        =  6
 CT_COPPER_ORE   =  8
 CT_WATER        =  9
 CT_DIAMONDS     = 10
 // Toyland
 CT_SUGAR        =  1
 CT_TOYS         =  3
 CT_BATTERIES    =  4
 CT_CANDY        =  5
 CT_TOFFEE       =  6
 CT_COLA         =  7
 CT_COTTON_CANDY =  8
 CT_BUBBLES      =  9
 CT_PLASTIC      = 10
 CT_FIZZY_DRINKS = 11

For more information on cargo types and the industries which accept and decline them and the differences in climate, see [[en/Manual/Cargo]] on this wiki.

'''Note:''' Industry id's are not found in the API documentation, only an industries accepted cargo and produced cargo is available (along with if it has a helipad or a dock, ie; an oil rig).

[[Category:en/Development]]
[[Category:en/Development/Script/NoAI]]