This page provides documentation of the public interface of [[en/Development/Script/Script communication protocol|SCPLib]]. 

{{en/Warning|The interface documentation is auto-generated using the build-docs.py command of the library. Do not edit the interface documentation manually. Instead make suggestions on the tracker or submit a patch on main.nut: http://dev.openttdcoop.org/projects/scriptlib-scp}}


=SCPLib - Main class=
Note that you must create an instance of SCPLib and use that to call the member functions. 

=='''SCPLib::AddCommand'''(_Name, _CommandSet, self, _loopback=null)==
Add a command
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|_Name
|a string with the name of the command
|-
|_CommandSet
|a string with the name of the command set
|-
|self
|optional pointer to an instance of the class where the callback function belongs to. In most cases you'll probably pass 'this' as this parameter.
|-
|_loopback
|pointer to callback function
|-
|''result''
|void
|}

=='''SCPLib::QueryCompany'''(_usingCommand, _usingSet, _CompanyID, ...)==
Send a query to a companyID (could be an AI or anyone)
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|_usingCommand
|string with the command to send
|-
|_usingSet
|a string with the command set where the command using_command belongs to
|-
|_CompanyID
|company ID of the company to send the command to
|}

=='''SCPLib::QueryServer'''(_usingCommand, _usingSet, ...)==
Send a query to the server
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|_usingCommand
|string with the command to send
|-
|_usingSet
|a string with the command set where the command using_command belongs to
|}

=='''SCPLib::TellCompany'''(_usingCommand, _usingSet, _CompanyID, ...)==
Tell something a companyID (could be an AI or anyone).
By using Tell* instead of Query*, we tell the receiver of this message that we are not
expecting to get an answer.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|_usingCommand
|string with the command to send
|-
|_usingSet
|a string with the command set where the command using_command belongs to
|-
|_CompanyID
|company ID of the company to send the command to
|}

=='''SCPLib::TellServer'''(_usingCommand, _usingSet, ...)==
Send a query to the server
By using Tell* instead of Query*, we tell the receiver of this message that we are not
expecting to get an answer.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|_usingCommand
|string with the command to send
|-
|_usingSet
|a string with the command set where the command using_command belongs to
|}

=='''SCPLib::Answer'''(message, ...)==
Send an answer to a previous query, it will be sent to who has made the query to you.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|message
|pass the message instance that you got as parameter to your callback function
|}

=='''SCPLib::CanSpeakWith'''(companyID = 16)==
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|companyID
|ID of company to speak with. Defaults to 16 (Game Script)
|-
|''result''
|true if we could speak with that company ID, otherwise false
|}

=='''SCPLib::Check'''()==
You must include a call to this function in the main loop. This function scanns for incomming communication signs and if there is any incomming messages the registred callback functions are called.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|''result''
|void
|}

=='''SCPLib::SetAIAIProtocol'''(enable)==
Enable or disable AIAI protocol
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|enable
|boolean or 1/0 to tell if AIAI protocol should be enabled or not
|}

=='''SCPLib::GetAIAIProtocol'''()==
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|''result''
|1 if AIAI protocol is enabled, otherwise 0
|}

=='''SCPLib::SCPLogging_Error'''(enable)==
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|enable
|true to enable SCP loggin error only in console
|}

=='''SCPLib::SCPLogging_Info'''(enable)==
If you wish help us debugging what's going on, enabling this one should
help us, your console will get more noise. This also force error logging
if enabled.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|enable
|true to enable SCP loggin info in console
|}

=='''SCPLib::SCPGetCommunicationTile'''()==
The communication tile is where the signs used to communicate are placed. You can use this function to ignore all signs on this tile if you use signs for some other purposes.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|''result''
|the tile that is use as the Communication Tile
|}

=Callback function=
Several functions accept a callback function which is called when a command is received from a remote AI/Game Script. The callback function should follow this specification:

=='''MyClass.MyCallback'''(message, self)==
# Note that you can not use ''this'' inside your callback. Instead use the ''self'' parameter as a this-pointer. 
# If you wish to respond to the sender, you can do that by calling SCPLib.Answer.
{|border="0" padding="4" class="wikitable"
!scope="col" |
!scope="col" |
|-
|message
|a Message instance. Here you find information about command, data, sender etc.
|-
|self
|the instance that you registered together with the callback function
|-
|''result''
|void
|}


=Message=