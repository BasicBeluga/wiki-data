[[Translation:en/Archive/Compilation and Ports/Compiling on Mac OS X]]
{{es/Traducci√≥n|origen=Compiling_on_Mac}}

==Compilar y desarrollar OpenTTD en MacOSX==
Gu√≠a r√°pida para empezar con el desarrollo de OpenTTD en OSX.
Nota: si usted no ha instalado nunca nada parecido, necesitar√° un tiempo y tendr√° que hacer muchas descargas, pero despu√©s tendr√° acceso a muchos m√°s programas adem√°s de OpenTTD.

La compilaci√≥n de OpenTTD requiere el uso de la l√≠nea de comandos, as√≠ que antes de empezar, debe familiarizarse con la aplicaci√≥n Terminal.app si lo est√° ya. Un tutorial sobre el Terminal, muy breve, se puede encontrar [http://macapper.com/2007/03/08/the-terminal-an-introduction/ aqu√≠] (en ingl√©s), o consulte [http://www.google.com/search?q=tutorial+terminal+mac+osx Google].

==Instalar herramientas para desarrolladores: Xcode==
[[File:en/Archive/Compilation and Ports/Compiling MacOSX 02-Xcode.png|left|64px]]
En primer lugar es necesario instalar un compilador. Debe instalar Xcode (10.3+).
Lo debe de tener en el CD / DVD de instalaci√≥n de su sistema operativo.  Tambi√©n lo puede descargar desde la web de [http://developer.apple.com/ Apple Developer Connection] (registro gratuito obligatorio), aunque tiene m√°s de 500 MB de tama√±o. Este incluye, entre muchas otras cosas, gcc (en el paquete ''UNIX Dev Support''), que es el compilador que se utiliza en la mayor√≠a de los proyectos de c√≥digo abierto, incluyendo OpenTTD.

==Instalar las librer√≠as necesarias==
Para poder montar OpenTTD desde el c√≥digo fuente puede ser necesario instalar algunas [http://www.openttd.org/en/development librer√≠as]. Dependiendo de su instalaci√≥n local tal vez tambi√©n quiera instalar uno (u otro) sistema de control de versiones, como svn o mercurial, con el fin de obtener el √∫ltimo c√≥digo com√∫n de OpenTTD.

Los requisitos m√≠nimos para OpenTTD en Mac son:
* [http://www.zlib.net/ zlib]
* [http://www.libpng.org/pub/png/libpng.html libpng] (incluye zlib como dependiente)

Y opcionalmente puede desear instalar tambi√©n:
* [http://www.oberhumer.com/opensource/lzo/ lzo2]
* [http://www.freetype.org/ freetype2]
* [http://icu-project.org/ icu]

[http://www.libsdl.org/ SDL] y [http://fontconfig.org/ fontconfig] no son necesarios en mac.

La soluci√≥n m√°s sencilla para obtener estas librer√≠as es usar [http://www.macports.org/ macports] o bien [http://www.finkproject.org/ fink] que las instalar√° por usted. Alternativamente, puede compilarlas e instalarlas a partir del c√≥digo fuente usted mismo. Como otra alternativa puede visitar las p√°ginas de las librer√≠as y ver si ofrecen listas de versiones binarias compiladas. Al menos libpng s√≠ lo hace.

===Usar MacPorts===
[http://www.macports.org/ El Proyecto MacPorts] es una iniciativa de la comunidad de c√≥digo abierto para dise√±ar un sistema f√°cil de usar para compilar, instalar y actualizar ya sea con la l√≠nea de comandos, con X11 o con el software basado en Aqua de c√≥digo abierto del sistema operativo Mac OSX. Como va a instalar librer√≠as en directorios de su sistema, tendr√° que hacerlo como administrador a trav√©s del comando ''sudo'' (que requerir√° que introduzca la contrase√±a de administrador). Para m√°s informaci√≥n sobre <code>sudo</code> consulte [https://www.wikipedia.org/wiki/es:Sudo wikipedia].

====Instalando librer√≠as con MacPorts====
Antes de instalar cualquier librer√≠a, aseg√∫rese de tener acceso a los √∫ltimos puertos, actualizando el repositorio local:
 <code>sudo port selfupdate</code>

Instale ''libpng'' (la librer√≠a ''zlib'', que tambi√©n es necesaria, se instalar√° de forma autom√°tica con ella, por ser un archivo dependiente):
 <code>sudo port install libpng</code>
Se le pedir√° tambi√©n que confirme los paquetes requeridos adicionales (como ''libz'', librer√≠as zip).

Para compilar un ''binario est√°tico'' (para redistribuirlo), o tambi√©n por conveniencia suya, es posible que desee estos otros:
 <code>sudo port install fontconfig
 sudo port install freetype
 sudo port install icu</code>

Si ha seguido todos los pasos que hemos visto, se habr√°n instalado en su ordenador las librer√≠as necesarias (tardando alg√∫n tiempo) como pre-requisitos para poder compilar OpenTTD por usted mismo.
====Algunas notas sobre MacPorts====
Si usted quiere compilar binarios para distribuirlos a otras personas, puede que quiera compilar binarios universales. Todos los paquetes MacPort mencionados anteriormente tienen la opci√≥n de instalarse como librer√≠as universales, pero se tiene que solicitar en cada instalaci√≥n:
 <code>sudo port install zlib +universal</code>

Merece la pena echar un vistazo a la [http://guide.macports.org/#using.port documentaci√≥n de MacPorts]. Si necesitara por cualquier motivo una versi√≥n anterior de una librer√≠a, puede hacer una peque√±a visita y [https://trac.macports.org/wiki/howto/InstallingOlderPort encontrarla aqu√≠].
{{es/Nota| Es posible que desee instalar m√°s herramientas, p.e. mercurial o git, usando tambi√©n macports. Lamentamos que algunos incorporan inconv como archivo dependiente. Eso no es malo, pero acabar√° con ''dos versiones iconv'' en su disco duro: uno proporcionado por Apple en /usr/lib y otro instalado por macports en /opt/local/lib. Esas dos no son compatibles, definen diferentes s√≠mbolos y son diferentes versiones. Temporalmente se puede desactivar el libiconv de macport ("sudo port deactivate libiconv") de lo contrario podr√≠a terminar en ocasiones con un fallo de vinculaci√≥n (vea [http://bugs.openttd.org/task/3313 FS 3313]). Pero esto podr√≠a hacer que svn, mercurial o lo que sea se base en la versi√≥n no-utilizable de macport}}
{{es/Nota| Hay problemas con algunas versiones de gcc que se suministran por MacPorts. Utilice uno de los compiladores suministrados por Apple, pero con los argumentos del compilador ilegal. Puede cambiar el compilador utilizado con [http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/Xcode-2.5/man8/gcc_select.8.html gcc_select]}}
===Usar fink===
Fink es b√°sicamente lo mismo que MacPorts, pero puede que no funcione tan bien en las nuevas versiones de OSX.

'''Nota: fink s√≥lo se utiliza para la instalaci√≥n de svn y libpng. Aunque es recomendable, no es obligatorio instalar nada m√°s.'''

Fink es una buena herramienta para instalar el software de c√≥digo abierto de comandos simples. Puede obtener Fink aqu√≠: http://fink.sourceforge.net/.
{{es/Aviso| Si ha instalado iconv-dev usando Fink, aseg√∫rese de que tiene al menos la versi√≥n 1.11 o acceso a filenames/file (partidas guardadas, escenarios ...) si no, no funcionar√° correctamente}}

Antes de instalar cualquier cosa con fink, debe actualizar fink (incluso si s√≥lo lo ha instalado). Esto se debe a que fink necesita algunos archivos locales, donde busca la versi√≥n del software que debe instalar. Si ha salido una nueva versi√≥n, es una tonter√≠a instalar una versi√≥n obsoleta. Puede descargar Fink con el comando fink selfupdate.

====Instalando el cliente svn con fink====
Al igual que ha instalado las librer√≠as, puede instalar el cliente de svn con el comando:
 <code>fink install svn-client</code>
Si su sistema operativo es Mac OSX Leopard (10.5), que ya tiene svn, en una ventana de terminal teclee <code>svn --version</code> para comprobarlo.


====Instalando librer√≠as con fink====
Necesita enlazar algunas librer√≠as cuando compile. Puede utilizar fink para instalarlas con los siguientes comandos en el terminal:
 <code>fink install libpng3</code> 
Se necesita libpng3 para realizar capturas de pantallas en png. En realidad, no lo necesita ahora, pero tenemos planes de futuro, por lo que ser√≠a bueno conseguirlo ya.
Seg√∫n cada caso, fink le indicar√° que necesita instalar un mont√≥n de cosas m√°s, basta con pulsar enter (contestar que s√≠) y Fink descargar√° e instalar√° todo.
La documentaci√≥n sobre compilaci√≥n de OpenTTD habla de ''zlib''. Pero Mac OSX ya lleva incorporada esta librer√≠a, por lo que ya la tiene y no hay necesidad de instalarla.

==Obtener el √∫ltimo c√≥digo del servidor svn==
Ahora tiene que hacer una "copia de trabajo" del c√≥digo con su nuevo cliente svn. Para ello, utilice el terminal y escriba:
 <code>svn checkout svn://svn.openttd.org/trunk Directorio</code>
'''Directorio''' es la carpeta en la que se colocar√° el c√≥digo. Si la carpeta no existe, se crear√°. Tenga en cuenta que podr√≠a tener que teclear un refrito despu√©s de instalar svn para poder hacer esto.<br />
Tambi√©n puede elegir descargar una revisi√≥n espec√≠fica a√±adiendo '''-r#####''' despu√©s de ''svn checkout''.

= Compilar el c√≥digo =
Dado que el sistema makefile se reescribe, esta secci√≥n se divide en dos partes. Elija la conveniente pseg√∫n el c√≥digo fuente que usted tenga

==Compilar un trunk/nightly builds==
Para aquellos que s√≥lo quieren una copia de trabajo para s√≠ mismos, escriba lo siguiente en una ventana de terminal:
 <code>cd ~/Downloads/directorio_conteniendo_los_c√≥digos_descargados
 ./configure
 make
 make bundle
</code>
Despu√©s de que el compilador compile todo lo que est√° comprimido, debes encontrar una OpenTTD.app en la carpeta [[File:en/Manual/Smile 22px.png]]

Para instrucciones m√°s detalladas, y opciones, siga leyendo

===Aplicar un parche===
{{es/Pendiente de traducci√≥n}}

If you want to use a patch/diff file then you have to apply it before using configure.
This is done in the same way as on Linux so you should read this: [[en/Archive/Compilation and Ports/Compiling on GNU‚àïLinux and üüâBSD#applying-a-patch]]

===Configure===
There is a configure script. This is used to figure out what your system is like and generate a makefile to compile a binary designed for your system. To run it, just write <code>./configure</code> and it will figure everything out on its own.

If you have a special request for your compilation, then you need to give arguments to configure. To see a full list of available settings, use the help system (<code>./configure --help</code>)

Example: if you want to make a static build (the binary will contain the needed parts of the libraries so they do not have to be installed on the computer playing the game), you will have to type <code>./configure --enable-static</code>. Multiple arguments can be added like <code>./configure --enable-static --enable-dedicated</code>.

If you don't have svn, and are trying to compile a nightly, configure with <code>./configure --revision=rXXXXX</code> (where XXXXX is the revision number).

===Compiling===
When configure has made a makefile for you, all you need to do to compile is to type <code>make</code>. The binary is then placed in the "bin" subdirectory.

If needed, make can accept arguments as well. Commonly used arguments will be (all of them will start by compiling the game if needed):

* <code>make run</code>: will start the game
* <code>make bundle</code>: this will create a bundle inside the bundle directory (created if needed). This means that the game will be executable from finder and not only terminal
* <code>make help</code>: lists all "targets" available (like make run and make bundle)

Make also accepts standard make arguments. The most interesting is the <code>-j</code> option. By default GCC compiles one file at a time and it can only use one CPU/core to compile a single file. If you want to compile as fast as possible, you can tell it to compile more files at once with the <code>-j</code> option. Example: <code>make bundle -j 4</code> will compile 4 files at once, making good use of a dualcore computer. Usually having two files compiling on each core is the fastest as one compile while the other one waits for read/write to the disk.
Note: the makefile dependencies has to be set up correctly for this to work. While they are for OpenTTD, don't assume this for other projects or nasty stuff can happen, like weird compilation errors.

If it comes to frequent compiles, it might be worth to look for alternative compilers. Newer OSX bring also llvm-gcc binaries which offer a speed gain during compilation for the cost of a bit slower binaries. In order to activate the set the environment variables CC=/Developers/usr/bin/llvm-gcc and CXX=/Developers/usr/bin/llvm-g++

===Compiling universal binaries===
Compiling a universal binary is done by adding <code>--enable-universal</code> to configure:
 <code>./configure --enable-universal</code>
This is all if your system is set up correctly. Make will then compile for intel, PPC and PPC970 (optimized for this particular CPU. Apple renamed it to G5), so setting G5 flags and such shouldn't be needed. Static is also enabled by default as it's assumed that the binary is to be moved to another computer.

For this to work, you will need universal libraries. For more info, read [[en/Archive/Compilation and Ports/Universal libraries]]

==Compiling OpenTTD 0.5.x or earlier (or revisions before 7759)==
To compile the source, you should use the terminal to go into your working copy and write
 <code>make</code>
OpenTTD will now compile. If this way OpenTTD fails to link, try:
 <code>make CC=gcc-3.3</code>

If this still fails, try:
 <code>make bundle</code>
Then, start the Application in the /bundle folder instead of the /bin folder.

This can happen if you got libraries compiled for OSX 10.3.x and you are using OSX 10.4.x. To solve this the right way, replace the library with one compiled for OSX 10.4. It will take longer than using GCC 3.3 though.

If you want to move the application you just compiled to another computer, you need to either install ''sdl'' (and ''libpng'' if you used it) on that computer too or compile statically. Apple recommends against static compilations, but I think it beats installing the libs if you just want to play the game.

===Compiling statically===
To compile statically, you need to edit makefile.config to do so. You can do this in any text editor (including Developer tools/Xcode). Find the line, which says
<code>STATIC:=</code>
and change it to
<code>STATIC:=1</code>

makefile.config are generated when running make, so it will not be generated before the first time you run make. To set it the first time you  compile, run
<code>make STATIC:=1</code>

Note: if you change anything in makefile.config, you should run
<code>make clean</code>
to make sure you get rid of anything compiled using the old setup

You are now ready to play after you added the grf files from winTTD

===Compiling universal binaries===
'''Needs at least Xcode 2.1 and OSX 10.4'''''

To compile universal binaries, make sure that you got the right crosscompilers installed from Xcode (default is 10.4u for i386 part and 10.3.9 for PPC part. This can be changed from Makefile.config)
then type:
 <code>make UNIVERSAL_BINARY:=1</code>
Replace UNIVERSAL_BINARY with TRIPLE_BINARY if you want G5 optimised code on top of the normal universal binary.
If you do not add a target argument to make, then it will optimise for the CPU it compiles on, which should always be the best choice unless you plan to move the binary to another computer.

'''Note:''' you need to have universal libraries (at the time of writing, this applies to ''libpng'' only) if you want to make universal binaries. If you use the default settings in OpenTTD, then you need to make a static library (libpng.a) that contains code for i386 based on the 10.4u sdk and the ppc based part needs to be based on the 10.3.9 sdk.