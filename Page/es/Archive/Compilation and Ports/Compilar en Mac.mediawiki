[[Translation:en/Archive/Compilation and Ports/Compiling on Mac OS X]]
{{es/Traducción|origen=Compiling_on_Mac}}

==Compilar y desarrollar OpenTTD en MacOSX==
Guía rápida para empezar con el desarrollo de OpenTTD en OSX.
Nota: si usted no ha instalado nunca nada parecido, necesitará un tiempo y tendrá que hacer muchas descargas, pero después tendrá acceso a muchos más programas además de OpenTTD.

La compilación de OpenTTD requiere el uso de la línea de comandos, así que antes de empezar, debe familiarizarse con la aplicación Terminal.app si lo está ya. Un tutorial sobre el Terminal, muy breve, se puede encontrar [http://macapper.com/2007/03/08/the-terminal-an-introduction/ aquí] (en inglés), o consulte [http://www.google.com/search?q=tutorial+terminal+mac+osx Google].

==Instalar herramientas para desarrolladores: Xcode==
[[File:en/Archive/Compilation and Ports/Compiling MacOSX 02-Xcode.png|left|64px]]
En primer lugar es necesario instalar un compilador. Debe instalar Xcode (10.3+).
Lo debe de tener en el CD / DVD de instalación de su sistema operativo.  También lo puede descargar desde la web de [http://developer.apple.com/ Apple Developer Connection] (registro gratuito obligatorio), aunque tiene más de 500 MB de tamaño. Este incluye, entre muchas otras cosas, gcc (en el paquete ''UNIX Dev Support''), que es el compilador que se utiliza en la mayoría de los proyectos de código abierto, incluyendo OpenTTD.

==Instalar las librerías necesarias==
Para poder montar OpenTTD desde el código fuente puede ser necesario instalar algunas [http://www.openttd.org/en/development librerías]. Dependiendo de su instalación local tal vez también quiera instalar uno (u otro) sistema de control de versiones, como svn o mercurial, con el fin de obtener el último código común de OpenTTD.

Los requisitos mínimos para OpenTTD en Mac son:
* [http://www.zlib.net/ zlib]
* [http://www.libpng.org/pub/png/libpng.html libpng] (incluye zlib como dependiente)

Y opcionalmente puede desear instalar también:
* [http://www.oberhumer.com/opensource/lzo/ lzo2]
* [http://www.freetype.org/ freetype2]
* [http://icu-project.org/ icu]

[http://www.libsdl.org/ SDL] y [http://fontconfig.org/ fontconfig] no son necesarios en mac.

La solución más sencilla para obtener estas librerías es usar [http://www.macports.org/ macports] o bien [http://www.finkproject.org/ fink] que las instalará por usted. Alternativamente, puede compilarlas e instalarlas a partir del código fuente usted mismo. Como otra alternativa puede visitar las páginas de las librerías y ver si ofrecen listas de versiones binarias compiladas. Al menos libpng sí lo hace.

===Usar MacPorts===
[http://www.macports.org/ El Proyecto MacPorts] es una iniciativa de la comunidad de código abierto para diseñar un sistema fácil de usar para compilar, instalar y actualizar ya sea con la línea de comandos, con X11 o con el software basado en Aqua de código abierto del sistema operativo Mac OSX. Como va a instalar librerías en directorios de su sistema, tendrá que hacerlo como administrador a través del comando ''sudo'' (que requerirá que introduzca la contraseña de administrador). Para más información sobre <code>sudo</code> consulte [https://www.wikipedia.org/wiki/es:Sudo wikipedia].

====Instalando librerías con MacPorts====
Antes de instalar cualquier librería, asegúrese de tener acceso a los últimos puertos, actualizando el repositorio local:
 <code>sudo port selfupdate</code>

Instale ''libpng'' (la librería ''zlib'', que también es necesaria, se instalará de forma automática con ella, por ser un archivo dependiente):
 <code>sudo port install libpng</code>
Se le pedirá también que confirme los paquetes requeridos adicionales (como ''libz'', librerías zip).

Para compilar un ''binario estático'' (para redistribuirlo), o también por conveniencia suya, es posible que desee estos otros:
 <code>sudo port install fontconfig
 sudo port install freetype
 sudo port install icu</code>

Si ha seguido todos los pasos que hemos visto, se habrán instalado en su ordenador las librerías necesarias (tardando algún tiempo) como pre-requisitos para poder compilar OpenTTD por usted mismo.
====Algunas notas sobre MacPorts====
Si usted quiere compilar binarios para distribuirlos a otras personas, puede que quiera compilar binarios universales. Todos los paquetes MacPort mencionados anteriormente tienen la opción de instalarse como librerías universales, pero se tiene que solicitar en cada instalación:
 <code>sudo port install zlib +universal</code>

Merece la pena echar un vistazo a la [http://guide.macports.org/#using.port documentación de MacPorts]. Si necesitara por cualquier motivo una versión anterior de una librería, puede hacer una pequeña visita y [https://trac.macports.org/wiki/howto/InstallingOlderPort encontrarla aquí].
{{es/Nota| Es posible que desee instalar más herramientas, p.e. mercurial o git, usando también macports. Lamentamos que algunos incorporan inconv como archivo dependiente. Eso no es malo, pero acabará con ''dos versiones iconv'' en su disco duro: uno proporcionado por Apple en /usr/lib y otro instalado por macports en /opt/local/lib. Esas dos no son compatibles, definen diferentes símbolos y son diferentes versiones. Temporalmente se puede desactivar el libiconv de macport ("sudo port deactivate libiconv") de lo contrario podría terminar en ocasiones con un fallo de vinculación (vea [http://bugs.openttd.org/task/3313 FS 3313]). Pero esto podría hacer que svn, mercurial o lo que sea se base en la versión no-utilizable de macport}}
{{es/Nota| Hay problemas con algunas versiones de gcc que se suministran por MacPorts. Utilice uno de los compiladores suministrados por Apple, pero con los argumentos del compilador ilegal. Puede cambiar el compilador utilizado con [http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/Xcode-2.5/man8/gcc_select.8.html gcc_select]}}
===Usar fink===
Fink es básicamente lo mismo que MacPorts, pero puede que no funcione tan bien en las nuevas versiones de OSX.

'''Nota: fink sólo se utiliza para la instalación de svn y libpng. Aunque es recomendable, no es obligatorio instalar nada más.'''

Fink es una buena herramienta para instalar el software de código abierto de comandos simples. Puede obtener Fink aquí: http://fink.sourceforge.net/.
{{es/Aviso| Si ha instalado iconv-dev usando Fink, asegúrese de que tiene al menos la versión 1.11 o acceso a filenames/file (partidas guardadas, escenarios ...) si no, no funcionará correctamente}}

Antes de instalar cualquier cosa con fink, debe actualizar fink (incluso si sólo lo ha instalado). Esto se debe a que fink necesita algunos archivos locales, donde busca la versión del software que debe instalar. Si ha salido una nueva versión, es una tontería instalar una versión obsoleta. Puede descargar Fink con el comando fink selfupdate.

====Instalando el cliente svn con fink====
Al igual que ha instalado las librerías, puede instalar el cliente de svn con el comando:
 <code>fink install svn-client</code>
Si su sistema operativo es Mac OSX Leopard (10.5), que ya tiene svn, en una ventana de terminal teclee <code>svn --version</code> para comprobarlo.


====Instalando librerías con fink====
Necesita enlazar algunas librerías cuando compile. Puede utilizar fink para instalarlas con los siguientes comandos en el terminal:
 <code>fink install libpng3</code> 
Se necesita libpng3 para realizar capturas de pantallas en png. En realidad, no lo necesita ahora, pero tenemos planes de futuro, por lo que sería bueno conseguirlo ya.
Según cada caso, fink le indicará que necesita instalar un montón de cosas más, basta con pulsar enter (contestar que sí) y Fink descargará e instalará todo.
La documentación sobre compilación de OpenTTD habla de ''zlib''. Pero Mac OSX ya lleva incorporada esta librería, por lo que ya la tiene y no hay necesidad de instalarla.

==Obtener el último código del servidor svn==
Ahora tiene que hacer una "copia de trabajo" del código con su nuevo cliente svn. Para ello, utilice el terminal y escriba:
 <code>svn checkout svn://svn.openttd.org/trunk Directorio</code>
'''Directorio''' es la carpeta en la que se colocará el código. Si la carpeta no existe, se creará. Tenga en cuenta que podría tener que teclear un refrito después de instalar svn para poder hacer esto.<br />
También puede elegir descargar una revisión específica añadiendo '''-r#####''' después de ''svn checkout''.

= Compilar el código =
Dado que el sistema makefile se reescribe, esta sección se divide en dos partes. Elija la conveniente psegún el código fuente que usted tenga

==Compilar un trunk/nightly builds==
Para aquellos que sólo quieren una copia de trabajo para sí mismos, escriba lo siguiente en una ventana de terminal:
 <code>cd ~/Downloads/directorio_conteniendo_los_códigos_descargados
 ./configure
 make
 make bundle
</code>
Después de que el compilador compile todo lo que está comprimido, encotrarás una OpenTTD.app en la carpeta [[File:en/Manual/Smile 22px.png]]

Para instrucciones más detalladas, y opciones, siga leyendo

===Aplicar un parche===
Si desea utilizar un archivo patch/diff tiene que aplicarlo antes de usar configurar. Esto se hace de la misma forma que en Linux, así que debería leer esto: [[es/Archive/Compilation and Ports/Compilar en Linux#aplicar-un-parche|Compilar en Linux#Aplicar un parche]]

===Configurar===
Hay un script de configuración. Se utiliza para averiguar cual es su sistema y generar un makefile para compilar un binario diseñado para este. Para ejecutarlo, sólo escriba <code>./configure</code> y se resolverá todo por sí mismo.

Si tiene una petición especial para su elaboración, necesitará dar argumentos a configurar. Para ver una lista completa de opciones disponibles, utilice el sistema de ayuda (<code>./configure --help</code>)

Ejemplo: si quiere hacer una construcción estática (el binario contendrá las partes necesarias de las bibliotecas por lo que no tiene que ser instaladas en el equipo para jugar), tendrá que escribir <code>./configure --enable-static</code>.
Se pueden añadir argumentos múltiples como <code>./configure --enable-static --enable-dedicated</code>.

Si no tiene svn, y están tratando de compilar una nightly, configure con <code>./configure --revision=rXXXXX</code> (Donde XXXXX es el número de revisión).

===Compilar===
Cuando configure haya hecho un makefile para ti, todo lo que necesitarás hacer para compilar es escribir <code>make</code>. El binario se colocará en el subdirectorio "bin".

Si es necesario, también puede aceptar argumentos. Comúnmente se utilizan argumentos (que se ejecutarán con la compilación si es necesario):
* <code>make run</code>: se iniciará el juego
* <code>make bundle</code>: esto creará un paquete dentro de un directorio de paquete (que se creará si es necesario). Significa que el juego será ejecutable a partir del finder y no sólo desde la terminal
* <code>make help</code>: lista todos los "objetivos" disponibles (como make run y make bundle)

Make también acepta argumentos estándar. El más interesante es la opción <code>-j</code>. Por defecto GCC compila un archivo a la vez y sólo puede usar una CPU/núcleo para compilar un solo archivo. Si quieres compilarlo lo más rápido posible, se le puede pedir compilar varios archivos a la vez con la opción <code>-j</code>. Ejemplo: <code>make bundle -j 4</code> compilará 4 archivos a la vez, haciendo buen uso de una computadora DualCore. Por lo general, tener dos archivos de compilación en cada núcleo es lo más rápido, mientras compila uno, el otro espera para leer/escribir en el disco.
Nota: las dependencias makefile tienen que estar configuradas correctamente para que esto funcione. Si bien esto es así para OpenTTD, no asuma esto para otros proyectos o pueden suceder cosas desagradables, como raros errores de compilación.

Si hace frecuentes compilaciones, puede ser que valga la pena buscar compiladores alternativos. OSX también trae nuevos binarios llvm-gcc, que ofrecen un aumento de la velocidad durante la compilación a costa de unos binarios un poco más lentos. Para activar el conjunto de variables de entorno CC=/Developers/usr/bin/llvm-gcc and CXX=/Developers/usr/bin/llvm-g++

{{es/Pendiente de traducción}}

===Compiling universal binaries===
Compiling a universal binary is done by adding <code>--enable-universal</code> to configure:
 <code>./configure --enable-universal</code>
This is all if your system is set up correctly. Make will then compile for intel, PPC and PPC970 (optimized for this particular CPU. Apple renamed it to G5), so setting G5 flags and such shouldn't be needed. Static is also enabled by default as it's assumed that the binary is to be moved to another computer.

For this to work, you will need universal libraries. For more info, read [[en/Archive/Compilation and Ports/Universal libraries]]

==Compiling OpenTTD 0.5.x or earlier (or revisions before 7759)==
To compile the source, you should use the terminal to go into your working copy and write
 <code>make</code>
OpenTTD will now compile. If this way OpenTTD fails to link, try:
 <code>make CC=gcc-3.3</code>

If this still fails, try:
 <code>make bundle</code>
Then, start the Application in the /bundle folder instead of the /bin folder.

This can happen if you got libraries compiled for OSX 10.3.x and you are using OSX 10.4.x. To solve this the right way, replace the library with one compiled for OSX 10.4. It will take longer than using GCC 3.3 though.

If you want to move the application you just compiled to another computer, you need to either install ''sdl'' (and ''libpng'' if you used it) on that computer too or compile statically. Apple recommends against static compilations, but I think it beats installing the libs if you just want to play the game.

===Compiling statically===
To compile statically, you need to edit makefile.config to do so. You can do this in any text editor (including Developer tools/Xcode). Find the line, which says
<code>STATIC:=</code>
and change it to
<code>STATIC:=1</code>

makefile.config are generated when running make, so it will not be generated before the first time you run make. To set it the first time you  compile, run
<code>make STATIC:=1</code>

Note: if you change anything in makefile.config, you should run
<code>make clean</code>
to make sure you get rid of anything compiled using the old setup

You are now ready to play after you added the grf files from winTTD

===Compiling universal binaries===
'''Needs at least Xcode 2.1 and OSX 10.4'''''

To compile universal binaries, make sure that you got the right crosscompilers installed from Xcode (default is 10.4u for i386 part and 10.3.9 for PPC part. This can be changed from Makefile.config)
then type:
 <code>make UNIVERSAL_BINARY:=1</code>
Replace UNIVERSAL_BINARY with TRIPLE_BINARY if you want G5 optimised code on top of the normal universal binary.
If you do not add a target argument to make, then it will optimise for the CPU it compiles on, which should always be the best choice unless you plan to move the binary to another computer.

'''Note:''' you need to have universal libraries (at the time of writing, this applies to ''libpng'' only) if you want to make universal binaries. If you use the default settings in OpenTTD, then you need to make a static library (libpng.a) that contains code for i386 based on the 10.4u sdk and the ppc based part needs to be based on the 10.3.9 sdk.