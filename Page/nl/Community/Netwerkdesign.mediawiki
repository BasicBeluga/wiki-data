[[Translation:en/Community/Railway Designs]]
{{nl/Vertaling|en/Community/Railway Designs|30}}
{{nl/Manual/Inhoudsopgave}}

=Draagkracht van je netwerk=
Deze pagina is bedoeld als enkel een theoretische uitleg over de draagkracht. Kruisingen en netwerken zijn veel belangrijker. Onder voorbehoud, laten we de verschillende factoren eens bekijken die de draagkracht beïnvloeden.

==Seinafstand (SA)==
Dit is een vrij duidelijke factor. Ver uit elkaar staande seinen resulteren in een lage draagkracht. Met een '''SA''' van één sein per N tegels, zal de minimum afstand tussen twee op volle snelheid rijdende treinen nooit kleiner zijn dan N+1 (Figuur 1). Wanneer treinen zo dicht bij elkaar rijden, heb je de theoretisch maximale dichtheid voor treinen bereikt. In de praktijk is het bereiken van deze dichtheid onmogelijk.
[[File:en/Community/Pat Fig1.png|frame|none|Figuur 1: Minimale afstand treinafstand van vijf bij een seinafstand van vier]]

===Dus welke seinafstand kan ik gebruiken?===
* Twee tegels
Een '''SA''' van twee geeft een minimum gat van 3, en is de optimale praktische oplossing. 

*Een tegel
Een '''SA''' van een levert volop problemen op. Zelfs een spoorsplitsing veroorzaakt een gat bij de seinen. Het is mogelijk om spoor onder een hoek met een sein te verbinden met een tussenruimte van 1, maar dit leidt tot een behoorlijke verhoging van bouw complexiteit.

* Halve tegel
Spoor onder een hoek heeft de mogelijkheid tot dubbele seindichtheid. Dit kan theoretisch interessant zijn, of voor het sparen van een paar millimeter bij een bijna-ongeluk situatie.

[[File:en/Community/Pat Fig2.png|frame|right|Figuur 2: Tussenruimte seinen is inefficiënt]]
Welke '''SA''' je ook kiest, een belangrijke overweging is consistentie. De capaciteit van een spoor wordt bepaald door de grootste seinafstand op dat traject. Dus, een traject met een sein elke twee tegels, dat een abnormale tussenruimte heeft van drie of vier tegels, zal te leiden hebben van een grote vermindering van de capaciteit en kan in potentie zorgen voor een file, en daarmee regel 1 overtreden (Figuur 2).

In OpenTTD bewegen treinen langzamer in bochten (dank je SmatZ!), en dus vereisen deze bochten een verhoging van de seindichtheid om flessenhalzen te voorkomen - als je een autoseinen instelling van 2 gebruikt, moet je handmatig de seindichtheid verhogen op gebogen spoor naar 1.<br style="clear:both;">

==Treinlengte (TL)==
Dit is een zwaard dat aan twee kanten snijdt. Een langere trein zal de waarschijnlijkheid verhogen op het ontstaan van een straf voor de realistische acceleratie, met als gevolg een meer gespreide constructie en complexer. Echter, een langere treinlengte verhoogt de maximale vrachtcapaciteit van je netwerk. Merk op dat wanneer je locomotieven gebruikt met een voor- en achtersectie, maakt dat de aanvullende 1/2 tegel die wordt ingenomen, kortere treinlengtes minder aantrekkelijk.

Typische waarden van drie tot vijf tegels zijn normaal, met vier als bijzonder favoriet voor hogesnelheidnetwerken.

==Kwantificeren draagkracht==
===Treindichtheid (TD)===
Je netwerk zal een bepaald aantal treinen kunnen dragen, en aannemend dat je een gestandaardiseerde treinlengte hebt gebruikt, kunnen we enkele formule definiëren. De '''Treindichtheid (TD)''' van een spoorlijn wordt gegeven in de eenheden trein per duizend tegels, an kan worden berekend door het aantal treinen te tellen op die spoorlijn en te delen door de lengte van de spoorlijn.

Typisch gemeten waarden voor een niet geoptimaliseerd netwerk van treinen van 4 tegels lengte zijn een '''TD''' van 25 (treinen per 1.000 tegels).

De maximale '''TD''' voordat verkeersopstoppingen zichzelf blijven voortplanten, kan worden gemeten door een rij treinen te laten accelereren van nul naar maximale snelheid, en de tussenafstand op het moment van het bereiken van de maximale snelheid te meten. Daarbij gebruik je de volgende formule: 

'''1.000 / (TL + treinafstand)'''

Bijvoorbeeld, een volgeladen 4-tegel [[nl/Manual/Base Set/Trains/Lev4 'Chimaera'|Chimaera]] (de tussenafstand tussen voor- en achterkant van een [[nl/Manual/Base Set/MagLev|MagLev]]) die is gerealiseerd is 12, gegeven de kritieke dichtheid van 1.000/16 = 62,5).

Because this critical density incorporates information about acceleration and time to reach top speed, it can also tell you about the practical capacity of your network. For example, using trains with a lower top speed actually makes it easier to have a dense network. The average train-train gap is much smaller for rail than for monorail or maglev. Repeating the previous example but using the electric rail [[nl/Manual/Base Set/Trains/T.I.M.|T.I.M.]] gives a train-train distance of only 6, and a critical density of 100. Slow doesn't mean better, however, as the reduced line density will be more than compensated for by quick turnaround times.

It is possible to run a network at higher than the critical density, but it is ill-advised.

===Theoretische maximale treindichtheid===
Simply put, this is the train density if your network is entirely filled with trains at the minimum distance between each other. You will never reach this. 

This is given by ''' 1000 / (TL + SA + 1) '''

For example, 4-tile trains and a signal distance of 2 will give a theoretical maximum train density of 140.

==Draagcapaciteit (DC)==
Since '''TL''' alters the carrying capacity of a line, comparing '''TD''' across different '''TL''' is meaningless. In order to compare efficiency figures between different personal preferences, we need a new metric. This new metric will simply be a measure of how many units of cargo your network is transporting per year, per track. It will be directly proportional to the average quantity of cargo per track tile, and also to how fast this cargo is moving.

Work on this unit is pending.

=Je netwerk efficiënter maken=
Ok, so now that we've defined the parameters that we had already intuitively understood, how can we use them to improve our networks? The golden rule of network optimisation is that trains on the network never slow down. There are two possible parts of a network where this could happen, splits and merges.

==Splitsen==
For a track split, one must ensure that there is not a longer-than-normal signalling gap at the split point. This can be taken care of by careful or over-abundant signalling.

==Samenvoegen==
Merges present us with a unique problem. For a trivial merge, trains on the mainline could potentially be stopped by a sideline train. There is already a body of work on [http://www.openttdcoop.org/wiki/Priorities Priorities] by our colleagues in the cooperative circuit. A perusal of this link should familiarise you with the principles of priority merges.

Consider a typical non-junction merge, at the exit of a pickup station. A tightly-packed optimised stream of trains enters the station, but because of differences in loading times, this order is disrupted on the station exit, and you end up with two tracks of loosely-packed trains. One of these lines, designated the main line, will have, on average, train-train gaps large enough to fit a third train into. Simply connecting the two lines together will not work, and a priority merge is required.

Note that, because trains that drop off cargo always spend the same length of time at a platform, it is possible to dematerialise and reassemble a tightly packed stream of trains, even one above the critical density! (Figure 3)
[[File:en/Community/Diamond Stream.png|thumb|800px|none|Figure 3: Dropoff with stream reassembly]]

A first-pass merge using a priority block will reduce the traffic ratio from 1:1 to about 3:1 in favour of the main track (Figure 4). Adding a second priority merge straight after the first one would be a futile gesture, since trains on both lines would continue at the same speed and the mainline train would simply claim priority again. Introducing a delay by a loop of track, followed by a second priority merge, will reduce the sideline to a mere trickle of trains and will have filled in most of the available slots on the mainline. Existing solutions would involve a pre-acceleration track, however a cyclotron eliminates the need to lose momentum.
[[File:en/Community/Priority Merge.png|frame|none|Figure 4: Priority merge]]

===Cyclotrons===
Consider a sideline that loops back on itself after a failed priority merge. A train in this loop would continue to re-test the mainline for entry conditions, once every 8 * '''TL'' tiles until it found a space large enough to merge with the main line. After the cyclotron was empty, the next waiting train could pre-accelerate and be injected into the cyclotron, ready to continue the cycle. This system has some flaws, however, as it has a capacity of one train and there will be many missed opportunities due to the train being in the wrong position in the accelerator. ''[Broken link to Simple Cyclotron removed.]'' Junctions are a large and well-trodden area of openttd; I have restricted myself to unbranched feeder structures. You will find that a highly-optimised stream of trains does NOT weather a junction well.

Refinements to the cyclotron are possible. There is enough space on the track loop to contain two trains, and a system of priority signals will enable a second train to optionally enter the cyclotron. With two trains in the cyclotron, there will be a doubled chance of entering a slot on the mainline. In order to prevent a traffic jam inside the cyclotron (which would be disasterous), some delay tweaking is necessary, but the end result is exceedingly useful.

The injection delay assumes that the second injected train is accelerating from standstill, and there is a small chance that second train has in fact chanced upon the cyclotron entrance at full speed. In this case, the timing will be wrong and the second train will almost certainly cause a jam within the cyclotron (and consequently on the main line). This can be compensated for by some additional signalling to filter out full-speed trains. The filtered out full-speed trains can either be diverted onto a second loop, or simply drained of momentum by a signal. 

A cyclotron incorporating all the optimisations discussed, and some additional fixes, is shown in Figure 5.
[[File:en/Community/Junctionary/Cyclotron Full.png|thumb|800px|none|Figure 5: full-featured cyclotron]]

''[Broken link to a savegame removed.]''

Editor's note: Whilst I would like to defend my cyclotron refinements, experimentation has proven that pre-acceleration is a more robust system. The two have been combined in the savegame linked previously.
{{nl/Kenmerken|0.7|text= 0.7.0}}

===Parallele cyclotrons===
An attempt to minimize the drawbacks of the full featured cyclotron leads to parallel, small, 1-train cyclotrons. In this design, an array of cyclotrons, each handling one train, may be fed simultaneously. They may have different loop size in order to prevent synchronization between the cycling trains, giving more chance to find a slot in the flow of the main line. Each loop still needs it own acceleration lane so the trains enter the loop at full speed. If a train happened to enter the loop at low speed, it would get a chance to join the main line at non-max speed and cause a possibly large traffic jam.

Figure 6 shows a parallel cyclotron with two loops.
[[File:en/Community/Junctionary/Parallel Cyclotron.png|thumb|800px|none|Figure 6: Parallel cyclotron]]

A savegame with the example given in Figure 6 is available [http://gbizzotto.free.fr/parallel_cyclotron.sav Here] (version 0.7 or higher required to open).

Advantages over the full featured cyclotron:
* Can handle more than two trains
* Faster fail-and-retry pace
* No need to synchronize the looping trains
* Easier to build and remember

Drawbacks:
* Bigger when using more than one loop