[[Translation:en/Archive/Source/OpenTTDDevBlackBook/Format of langfiles]]
<!-- spis -->
{{pl/Development/Rozwój}}

== Przegląd ==

Pamiętaj, że jest to przewodnik dla programistów. Do prostego tłumaczenia OpenTTD na języki alternatywne, jest używany [https://translator.openttd.org/ web translator] .

== Kompilowanie plików językowych ==

Dokumenty OpenTTD GitHub zawierają [https://github.com/OpenTTD/OpenTTD/blob/master/docs/compiling_lang_files.md przewodnik po kompilowaniu plików lang].

== Ogólny układ ==

Każdy wpis w pliku językowym składa się dokładnie z jednej linii.

Wpis jest albo [[#comment-section|comment]], za [[#pragmas-section|pragma]] lub  [[#translations-section|translation]].

Jeśli korzystasz z narzędzia do tłumaczenia internetowego, zobaczysz tylko tłumaczenia.


Kodowanie to UTF-8.

== Komentarze ==
<span id="comment_section"></span>
Komentarze zaczynają się od jednego lub więcej niż dwóch znaków skrótu (#) lub średnikiem (;). Puste linie są również ignorowane.

<pre>
# Ignore
#### Ignore this
;and this too
</pre>

== Pragmas ==
<span id="pragmas_section"></span>
Pragmy zaczynają się od dwóch znaków skrótu (#). Poniższa tabela zawiera listę wszystkich dostępnych pragm:
{| border=1
|-
!Name !! Function
|-
|name ''name''|| Name of the language in English
|-
|ownname ''name''|| Name of the language in the language itself
|-
|isocode ''code''|| ISO code for the '''language''' (eg. ''de'')
|-
|plural ''number''|| Type of the plural forms (for a list of codes see below)
|-
|gender ''up to 8 gender names''|| defines the list of allowed genders
|-
|case ''up to 50 case names''|| defines the list of available cases
|-
|textdir ''ltr or rtl'' || defines the text direction (''ltr'' stands for "left-to-right" whilst ''rtl'' stands for "right-to-left", i.e. Hebrew or Arabic)
|-
|digitsep ''symbol'' || separator of digits for non-currency values, also known as "thousand separator"
|-
|digitsepcur ''symbol'' || separator of digits for currency values
|-
|decimalsep ''symbol'' || separator of decimals
|-
|winlangid ''hexnumber'' || the identifier of the language as defined by Microsoft Windows&reg;
|-
|grflangid ''hexnumber'' || the identifier of the language as used for the GRF
|-
|id ''hexnumber'' || Next string id starts at ''hexnumber''
|-
|}

===Lista rodzajów liczby mnogiej===
Poniższa tabela zawiera dozwolone wartości kodu dotyczące tworzenia liczby mnogiej: 
{| border=1
|-
! rowspan="2"| Code Value !! Description !!
|-
! Used for
|-
| rowspan="2"| 0 || Two forms, singular used for one only 
|-
| Danish, Dutch, English, German, Norwegian, Swedish, Estonian, Finnish, Greek, Hebrew, Italian, Portuguese, Spanish, Esperanto
|-
| rowspan="2" | 1 || Only one form
|-
| Hungarian, Japanese, Korean, Turkish
|-
| rowspan="2" | 2 || Two forms, singular used for zero and one
|-
| French, Brazilian Portuguese
|-
| rowspan="2" | 3 || Three forms, special case for zero
|-
| Latvian
|-
| rowspan="2" | 4 || Three forms, special case for one and two
|-
| Gaelige (Irish)
|-
| rowspan="2" | 5 || Three forms, special case for numbers ending in 1[2-9]
|-
| Lithuanian
|-
| rowspan="2" | 6 || Three forms, special cases for numbers ending in 1 and 2, 3, 4, except those ending in 1[1-4]
|-
| Croatian, Czech, Russian, Slovak, Ukrainian
|-
| rowspan="2" | 7 || Three forms, special case for one and numbers ending in 2, 3, or 4, except those ending in 1[2-4]
|-
| Polish
|-
| rowspan="2" | 8 || Four forms, special case for one and all numbers ending in 02, 03, or 04
|-
| Slovanian
|}

===Przykład===
Standardowy plik językowy '''english.txt''' zaczyna się od następujących pragm:
<pre>
##name English (UK)
##ownname English (UK)
##isocode en_GB
##plural 0
##textdir ltr
;...
##id 0x0000
</pre>

== Tłumaczenia ==
<span id="translations_section"></span>

Tłumaczenia składają się z klucza i tłumaczenia. Dzieli je dwukropek (:).

=== Klucze ===

Klucz może zawierać tylko wielkie litery, cyfry i znak podkreślenia (_). Każdy klawisz zaczyna się od "STR_" , po którym następuje co najmniej jedno dobrze opisujące słowo.

 STR_MAPSIZE
 STR_000F_PASSENGERS
 STR_SORT_BY_DATE
 STR_0196_SHOW_LAND_OWNERS_ON_MAP

=== Tłumaczenia ===

Za pomocą nawiasów klamrowych {} do tłumaczeń można wstawiać specjalne polecenia, które są zastępowane albo przez strgen, albo gdy ciąg jest narysowany na ekranie. Pełna lista poleceń jest dostępna w [[pl/Archive/Source/OpenTTDDevBlackBook/Special strings|Specjalne ciągi znakowe]] . Oprócz <tt>{STRING'''x'''}</tt> i <tt>{RAW_STRING}</tt> zaleca się pozostawienie tych specjalnych ciągów domyślnie nienaruszonych. Polecenia specjalne mogą zastępować wartości lub inne ciągi, w których umieszczane są ciągi specjalne. Tłumacze mogą mieć wpływ na kolejność tych zamian, aby umożliwić płynny język.

=== Zmiana kolejności słów ===

Zamiana parametrów może być również wymienna. Umożliwi to użycie jednego parametru, który zwykle znajduje się w pozycji 0 (jak w: pierwszym) w przetłumaczonym ciągu znaków, w rzeczywistości na pozycji 1, zamieniając w ten sposób miejsce bez 1.

Jako przykład : STR_INDUSTRY_PROD_GOUP.

W języku angielskim ciąg brzmi jak "{BLACK}{BIGFONT}'''{STRING}''' production at '''{INDUSTRY}''' increases {COMMA}%!"

W języku fińskim ten sam ciąg znaków jest teraz "{BLACK}{BIGFONT}'''{1:INDUSTRY}''' tuottaa '''{0:STRING}''' {2:COMMA}{NBSP}% entistä enemmän!"

<!-- {{todo|Finish and correct this}} --> {{pl/Do poprawki|Zakończenie i skorygowanie tego}} 

== Cases ==

Po każdym kluczu może istnieć niestandardowa wielkość liter oddzielona kropką (.) . Sprawa musi zostać zdefiniowana na początku pliku przez ##case pragma.

W poniższym przykładzie z pliku w języku czeskim możesz zobaczyć, jak zdefiniować przypadki. W języku czeskim jest 7 przypadków, a w oknie dialogowym Subsydia występuje dodatkowy "case" ''(przypadek)'' do wpisywania dużej nazwy ładunku.

 ##case nom gen dat acc voc loc ins big

 STR_0011_MAIL                      :pošta
 STR_0011_MAIL.big                  :Pošta
 STR_0011_MAIL.gen                  :pošty

Ogólnym zastosowaniem przypadków jest dodanie kropki i nazwy sprawy do polecenia STRING. W akapicie "Dotace dopravy {STRING.gen} z {NBSP} {STRING} do {STRING} nebude dále nabízena." niezbędna jest sprawa dopełniacza.

 STR_202E_OFFER_OF_SUBSIDY_EXPIRED  :{BLACK}{BIGFONT}Nabídka dotace přepravy vypršela:{}{}Dotace dopravy {STRING.gen} z{NBSP}{STRING} do {STRING} nebude dále nabízena.
 STR_2027_FROM_TO                   :{ORANGE}{STRING.big} z {STRING} do {STRING}

== Liczba mnoga ==
<span id="plural_form"></span>

==== Wprowadzenie ====
W większości języków formy liczby pojedynczej i mnogiej są nieco inne.
Każde słowo można podzielić na dwie części - jedna część nie zmienia się zarówno w liczbie pojedynczej, jak i mnogiej, ale druga część różni się liczbą pojedynczą i mnogą. Nazwijmy je '''core''' ''(rdzeniem)'' i '''suffix'''.

Weźmy podstawowy przykład w języku angielskim, który jest podstawowy, ponieważ ma dwie formy: pojedynczą i mnogą.

Jest "'''1 train'''", ale tutaj są "'''2 trains'''".

Podzielmy teraz to słowo na część, która się nie zmienia, i część, która się zmienia:

*Core: "'''train'''"
*Suffix for singular: ""
*Suffix for plural: "'''s'''"

==== Pisanie ciągu ====
Jak powiedziałem wcześniej, istnieją dwie formy w języku angielskim.

Podstawową strukturą liczby mnogiej w języku angielskim jest <pre>core{P suffix1 suffix2}</pre> , gdzie sufiks1 jest sufiksem dla znaku, a sufiks2 jest przyrostkiem liczby mnogiej.

Należy pamiętać, że formy liczby mnogiej działają tylko wtedy, gdy w ciągu znajduje się odpowiedni parametr.

{COMMA} i {NUM}, wraz z innymi parametrami liczbowymi, dobrze sprawdzają się w określaniu liczby mnogiej.

Zróbmy ciąg, który wyświetla liczbę lamp w pokoju. Forma "lampy" zależałaby od ilości dostarczonej za pomocą parametru {NUM}.

==== Example ====
 STR_SENTENCE : I have {NUM} lamp{P "" s}
Do you see the core? Yes, it is the word '''lamp'''.

Later you see '''{P'''. This is the indicator that suffixes will come next.

'''""''' means there is no suffix. OpenTTD needs to know that - If there is no suffix, just write two quotation marks. So this is the first suffix, which will be used when {NUM} is equal to 1

'''s''' is the second suffix. This one will be displayed when {NUM} is bigger than 1.


Let's proceed to more advanced plural forms. Let's take '''mouse'''. Its plural form is '''mice'''.

First of all, imagine the sentence with different parameters.
*0 - Mum, there are 0 mice in the room!
*1 - Mum, there is 1 mouse in the room!
*3 - Mum, there are 3 mice in the room!
*23 - Mum, there are 23 mice in the room!
When you are ready, you can write the string.
 STR_SENTENCE : Mum, there {P 0 is are} {NUM} m{P ouse ice} in the room!
As you may have noticed, the first '''{P''' contains an extra number before the suffixes. This is used to specify which parameter should be used to determine the plural form. When no number is given, the previous parameter is used, but in this case there is no previous parameter, that's why we need to specify it.
<!-- {{todo|check if it is not wrong}} --> {{pl/Do poprawki|sprawdzenie, czy nie jest źle}} 

Mind that the singluar (1) is special in this plural definition. The plural form is used for all numbers >1 but also for 0. (Mum, there are 0 mice in the room).

==== String as number ====

If the argument that affects a plural form is given as {STRING} then you need to use a special parameter for '''{P''':
 Flat area around industries: {ORANGE}{STRING} tile{P 0:1 "" s}

==== OpenTTD usage ====
Now you understand basics of plural forms. Let's take some example from English translation.
 STR_QUANTITY_LIVESTOCK : {COMMA} item{P "" s} of livestock

This text is being displayed at stations when there is livestock cargo awaiting.

As you can see, {COMMA} parameter is given. Thanks to that parameter, we can change form of '''item'''.
Let's see how the string would change when we change supplied parameter.
*1 - 1 item of livestock
*4 - 4 items of livestock
*56 - 56 items of livestock


Spójrzmy teraz na ciąg bez podanego parametru. <pre>STR_WAGONS : Wagons</pre> Nie można tutaj zastosować liczby mnogiej. Wagon {P "" s} nie będzie tu działał.

Dlaczego? Ponieważ nie podano żadnego parametru.

Możesz po prostu zostawić ten ciąg bez zmian.

==== Inne typy liczby mnogiej ====
Znajdź swój język w poniższej tabeli  '''Lista typów mnogich''' . Języki są grupowane w zależności od zachowania słów w różnych ilościach.

Przyrostki są uporządkowane rosnąco, z ''dowolnym innym numerem'' na końcu:

* Pierwszy przyrostek jest zawsze liczbą pojedynczą.
*Second suffix may be for ''any other number'' (English), or depending on your language, for other numbers. For example in Polish language the second form applies for numbers that end with 2, 3 or 4, .but excluding -teen numbers.
*If the second suffix was not for ''any other number'', the third one is for ''any other number''.

Let's take Polish language and invent some dummy string
 STR_CARS : {NUM} aut{P o a ""}
Now take a look at description above, and guess how would the string look for {NUM} equal to 1, 2, 5, 13, 23, 38?
*1 auto (first suffix used)
*2 auta (second suffix used - number ends with 2, 3 or 4)
*5 aut  (third suffix used - ''any other number'')
*13 aut (third suffix used - second suffix excludes -teen numbers)
*23 auta (second suffix used - number ends with 2, 3 or 4)
*38 aut (third suffix used - ''any other number'')

== Płcie ==
<span id="genders_special_string"></span>
==== Wprowadzenie ====
Niektóre języki zawierają płeć. Każdy rzeczownik (jak fabryka, kalkulator, smok) ma swoją płeć.
Przymiotniki (zielone, nowe, piękne), a czasem czasowniki (spadać, jeść) mają wpływ na płeć.

Przede wszystkim pomyśl o płci swojego języka.
Then, open the Web Translator 2, go to "Manage" page of your language and check the dropdown list of genders. If there are no genders yet, hit "+" button and supply short forms of your genders ('''m f n''' for ''male female neutral'' is good).

Kiedy to zrobisz, pomyśl o ciągach w OpenTTD, które mogą wymagać płci. Wiadomości informują, że powstaje nowy przemysł, jest dobry, ponieważ przemysł jest rzeczownikiem, a niektóre słowa w ciągu powinny się zmieniać w zależności od płci.

==== Zapisywanie ciągu ====
Aby ustawić płeć łańcucha, wstaw znacznik {G=*} przed pierwszym słowem łańcucha, gdzie * to nazwa płci, którą wcześniej wysłałeś.

W ciągu, który może się zmieniać w zależności od płci, użyj struktury {G suffix1 suffix2 suffix3}  , w którym każdy sufiks odpowiada właściwej płci (kolejność według płci znajduje się w sekcji "Zarządzanie" Twojego języka na liście rozwijanej)

==== Przykład ====
Użyję języka łacińskiego w przykładach, ponieważ jest on dobrze znany i oczywiście używa płci.

Język łaciński ma trzy rodzaje, nazwiemy je '''m''', '''f''' i '''n'''.

Zgadnijmy rzeczowniki, których użyjemy w przykładach.
*'''puteus''' m - ''a well, pit''
*'''officina''' f - ''a workshop, factory''
*'''forum''' n - - ''an open square, marketplace''

Let's take some adjective and find its core and suffixes:

'''magnus''', '''magna''', '''magnum''' - ''large'' (male, female, neutral)

As you can see, '''magn''' is the core, and suffixes are '''us''', '''a''' and '''um''' respectively for male, female and neutral gender.


I tak działałby przykładowy ciąg:
<pre>STR_WELL : {G=m}Puteus
STR_FACTORY : {G=f}Officina
STR_SQUARE : {G=n}Forum
STR_IS_BIG : {STRING} magn{G us a um} est</pre>
Czy wyobrażasz sobie, jak będzie wyglądał wynik? Oto odpowiedź:
*Puteus magnus est
*Officina magna est
*Forum magnum est
Again, as with plural form, if there is no suffix, write "". Use always as many suffixes as there are genders.
<!-- {{todo|How about the order of the suffixes? Do you have to use the same order as defined in the pragma?}} --> {{pl/Do poprawki|Co powiesz na kolejność przyrostków? Czy koniecznie używać tej samej kolejności, jak zdefiniowano w pragmie?}} 

==== Advanced use ====
{G...} tag bases on gender of {STRING} after the tag.
However, if you need to change suffix of a word which is after {STRING} (before tag), you have to write ID of string you want to retrieve gender from.
This may sound clumsy, so let's take a look at example:

<pre>{BLACK}{BIGFONT}Now{G y a e} {STRING} został{G "" a o} posadzon{G y a e} blisko {TOWN}!</pre>
Second and third {G...} will not work, because there is no {STRING} after them to get gender from.

We want to retrieve gender from first (and the only one) {STRING} tag. First tag has ID=0, second tag has ID=1 and so on. Here is how to do that:

<pre>{BLACK}{BIGFONT}Now{G y a e} {STRING} został{G 0 "" a o} posadzon{G 0 y a e} blisko {TOWN}!</pre>
Adding IDs resolved the problem. The string works as expected.


What if there are more {STRING}s? ( <!-- {{todo|I'm not sure, please verify this}} --> {{pl/Do poprawki|Nie jestem pewien, prośba zweryfikowamia tego}} )
In the following example we use two genders: male and female

<pre>Mis{G ter s} {STRING} is shocked by h{G 0 is er} grand{G 2 son daughter} who flamed mis{G ter s} {STRING} yesterday. The bad {G boy girl}'s name is {STRING}</pre>
Now I'll explain why some {G...}'s have numbers and other do not:
*First, fourth and fifth do '''not''' have number, because they fetch gender of next string (default behaviour)
*Drugi i trzeci mają numer, ponieważ pobierają płeć ciągu, który nie jest po znaczniku. Musimy powiedzieć silnikowi gry, której płci {STRING} chcemy wybrać. Pierwsza liczba to zero, ponieważ jest to ID pierwszego {STRING} . Następny numer to dwa, ponieważ jest to ID trzeciego {STRING}

<!-- {{todo|this section may be clumsy, feel free to improve it}} --> {{pl/Do poprawki|ta sekcja może być niezdarna, można ją ulepszyć}}

[[Category:pl/Do poprawki]]