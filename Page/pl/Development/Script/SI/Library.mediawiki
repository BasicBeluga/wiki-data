[[Translation:en/Development/Script/Library]]


<!--{{NoAI}}-->{{pl/Development/Script/NoAI}}

= Biblioteki ''(Libraries)'' =

Aby uniknąć powielania kodu, a każdy twórca AI wykonujący tę samą pracę w kółko, istnieje system bibliotek. Istnieją oczywiście dwie strony: tworzenie biblioteki i korzystanie z biblioteki.

== Korzystanie z istniejących bibliotek ==

Aby skorzystać z istniejącej biblioteki, wystarczy załadować ją do swojej AI. Jest to bardzo proste. Układ katalogu biblioteki (bin/ai/library/):

 graph/
   aystar/
 pathfinder/
   road/
   rail/
 queue/
   binary_heap/
   priority_queue/
   fibonacci_heap/

Say you want to use the [[en/Development/Script/Library#priority-queue|Priority Queue]], you simply do:

 import("queue.priority_queue", "PriorityQueue", 2);

The first parameter is the category and the implementation, divided with a dot ('.'). The next parameter is the name the library you import will have, in this case <code>PriorityQueue</code>. It can be anything you like, as long as it doesn't exist yet. The last parameter is the version you expect the library to be. To get the current version of a library, open library.nut from the corresponding directory. 

Sprawdzenie wersji jest bardzo ważne. Jeśli spodziewasz się wersji 1, ale na komputerze niektórych użytkowników biblioteka znajduje się w wersji 2, twoja sztuczna inteligencja odmówi załadowania. To dobra rzecz, ponieważ nowa wersja oznacza, że ​​coś się zmieniło w stosunku do istniejących funkcji, a twoja sztuczna inteligencja najprawdopodobniej zareaguje, jeśli z niej skorzystasz. Ten system wczesnego wykrywania problemów powinien uniknąć wielu konfliktów w przyszłości.

Jak korzystać z biblioteki? Prosty:

 local pq = PriorityQueue();
 pq.Insert(2);

Oczywiście zależy od biblioteki, jakie parametry należy podać konstruktorowi i jakie funkcje istnieją. Będziesz musiał otworzyć <code>queue/priority_queue/main.nut</code> , aby zobaczyć całą dokumentację.

== Tworzenie biblioteki ==

Creating a library is like creating an AI. You create a directory in a category in <code>bin/ai/library</code>, and you put in it a file called '<code>library.nut</code>'. Now this is almost identical with '<code>info.nut</code>', as you put in your AI directory, but instead of extending <code>AIInfo</code>, it extends <code>AILibrary</code>, and instead of calling <code>RegisterAI</code>, you need to call <code>RegisterLibrary</code>. All makes sense, not? An example:

 class PriorityQueue extends AILibrary {
   function GetAuthor()      { return "OpenTTD NoAI Developers Team"; }
   function GetName()        { return "Priority Queue"; }
   function GetShortName()   { return "QUPQ"; }
   function GetDescription() { return "An implementation of a Priority Queue"; }
   function GetVersion()     { return 2; }
   function GetDate()        { return "2008-06-10"; }
   function CreateInstance() { return "PriorityQueue"; }
   function GetCategory()    { return "Queue"; }
 }
 
 RegisterLibrary(PriorityQueue());

Now what you need to do is to create a file called '<code>main.nut</code>'. It should contain a class you named at <code>CreateInstance()</code>, like in your AI. Then the same rules apply as an AI. <code>require()</code> works as you expect, and you can define your class how ever you like.

There are some things you can not do:

* Register 2 libraries in one <code>library.nut</code>
* Define more than 1 class in the <code>main.nut</code> (or any required file). However, you can define sub-classes. Say you need an extra class in <code>PriorityQueue</code>. You can name it <code>PriorityQueue.Subclass</code>. To access it from within your main class, use <code>this.Subclass</code>. See <code>[[en/Development/Script/Library#aystar|graph.AyStar]]</code> for an example how it's done.

== Multiple libraries of different versions ==

It will happen to all of us that you have one AI using version 1 of a library, and an other using version 2. For example we take pathfinder.road. Now version 2 will be in ai/library/pathfinder/road, but where should you put version 1? For that we created a method:

In the directory-name of the library, everything behind any '.' (dot) is ignored. So you can call 'road' 'road.blabla', or 'road.2', it doesn't matter for the internals. Now this also allows multiple libraries of the same name, and different versions. For example, if you put version 1 of the pathfinder.road in 'pathfinder/road.1', and keep version 2 in 'pathfinder/road'. The system will load both, and based on your import line, pick one of them (or throws an error if the version you requested doesn't exist ;)).

The collision system still works. So if you put version 2 in both 'pathfinder/road' and 'pathfinder/road.2', it will complain it found two equal libraries.

= Standard libraries =

There are several libraries for common tasks bundled together with NoAI. These have been prepared by 'OpenTTD NoAI Developers Team'.

== Category: Graph ==

=== AyStar ===

This is an implementation of [https://www.wikipedia.org/wiki/A* AyStar pathfinding algorithm]. It solves graphs by finding the fastest route from one point to the other.

'''Required libraries:''' <code>[[en/Development/Script/Library#binary-heap|queue.binary_heap]]</code>

'''Version History''':
* aystar.1: r13461
* aystar.2: r13463
* aystar.3: r13496
* aystar.4: current

== Category: Pathfinder ==

=== Road ===

This is an implementation of a basic road pathfinder. You can use it to find the length of existing routes and / or to build new routes. Since version 3 building of tunnels / bridges is supported. For more information, see [[en/Development/Script/RoadPathfinder]]

'''Required libraries:''' <code>[[en/Development/Script/Library#aystar|graph.aystar]]</code>

'''Version History''':
* road.1: r13500
* road.2: r13570
* road.3: current

=== Rail ===

This is an implementation of a basic rail pathfinder. You can use it to find a path for new railways. For more information, see [[en/Development/Script/RailPathfinder]]

'''Required libraries:''' <code>[[en/Development/Script/Library#aystar|graph.aystar]]</code>

'''Version History''':
* rail.1: r14382

== Category: Queue ==

=== Binary Heap ===

This is an implementation of [https://www.wikipedia.org/wiki/Binary_heap binary heap] data structure.

'''Version History''':
* binary_heap.1: current

=== Priority Queue ===

This is an implementation of [https://www.wikipedia.org/wiki/Priority_queue priority queue] data structure.

'''Version History''':
* priority_queue.1: r13440
* priority_queue.2: r13447

=== Fibonacci Heap ===

To jest data structure implementacji [https://www.wikipedia.org/wiki/Fibonacci_heap fibonacci heap] .

'''Version History''':
* Fibonacci_heap.1: 14380