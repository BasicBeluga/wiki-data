[[Translation:en/Development/Script/Lists]]


<!--{{NoAI}}-->{{pl/Development/Script/NoAI}}

Listy są podstawową częścią interfejsu API NoAI. Pozwalają na szybką i łatwą manipulację wszelkiego rodzaju danymi. Ta strona wyjaśni w prosty sposób, jak z nich korzystać i czego możesz się po nich spodziewać.

=== Elementy / Wartości ''(Items / Values)'' ===
AIList to zestaw par element-wartość. Element to zazwyczaj dane, które chcesz zapisać na liście. Na przykład identyfikatory miast. Wartość to niektóre informacje związane z pozycją. Na przykład możesz mieć liczbę mieszkańców miasta jako wartość.

=== Valuators ===
Aby filtrować, możesz zastosować rzeczoznawców na liście za pomocą <code><list>.Valuate(<valuator>)</code> , odpowiednio zmieniają wartość wpisu na liście.
Pierwszym parametrem tej funkcji jest funkcja, której chcesz użyć do wyceny pozycji na liście. Powinien zaakceptować co najmniej jedną liczbę całkowitą, która zostanie ustawiona dla elementu, i powinien zwrócić liczbę całkowitą, która stanie się wartością elementu. Możliwe są dodatkowe parametry, wówczas należy je również dodać do Valuatora. Przykład:

 list.Valuate(AIBridge.GetPrice, 5);
 list.Valuate(AIBridge.GetMaxLength);
 function MyVal(bridge_id, myparam)
 {
    return myparam * bridge_id; // This is silly
 }
 list.Valuate(MyVal, 12);

Po zastosowaniu kalkulatora możesz modyfikować (usuwać elementy, sortować itp.) Listę za pomocą funkcji znajdujących się w [http://noai.openttd.org/docs/trunk/classAIList.html API docs].

== Przykłady list ==
=== AIList() ===

To start, <code>AIList()</code> is the most primary list we have. It doesn't depend in any way on the OpenTTD core. It is a simple list you can fill with items and make valuators for them. As <code>AITownList()</code> is a good example of a bit more complex <code>AIList()</code>, we will discuss that one rather then <code>AIList()</code>.

=== AITownList() ===

Of course you want to know which towns are in the map, and most likely: which town has to most population, and what the location is. For that we have <code>AITownList()</code>. If you create an instance of it, it immediately fills itself with all towns. You can walk them like this:

 foreach (town, value in townlist) { }

This walks all the towns inside the list. Of course knowing the towns is only part of <code>AITownList()</code>, you can also make it find data for you. For example, we want to know all towns with population higher than 500. First we call a valuator that gets the population per town for us, and then we filter all the towns with a lower population than 500 out of the list. What is left, is a list of towns that have more than 500 people in them.

 townlist.Valuate(AITown.GetPopulation);
 townlist.KeepAboveValue(500);

Jeśli teraz wydrukujesz listę, zobaczysz tylko miasta o liczbie mieszkańców powyżej 500. Oczywiście możesz teraz uzyskać pozycję tych miast, wykonując:

 townlist.Valuate(AITown.GetLocation);

Oznacza to jedynie, że liczba ludności przypadająca na miasto jest tracona i zastępowana przez lokalizację.

AIList()s are automatically sorted. Normally this is down by value, descending (so highest first). You can change the sort order with the <code>Sort()</code> functions (see API documentation). You can see if a list is empty with <code>Empty()</code>, or find the amount of towns with <code>Count()</code>. For more details, see API documentation.

=== AITileList() ===

Oprócz listy miejskiej, listy branżowej itp. Mamy również <code>AITileList()</code> . Jest to w rzeczywistości to samo co <code>AITownList()</code> , ale śledzi kafelki. Możesz dodać kafelki do listy, a następnie, na przykład, zobaczyć, jaka jest akceptacja dla określonego ładunku. Lub odfiltruj płytki, których nie można zbudować. Oznacza to, że możesz szybko znaleźć dobre miejsce na stację, o której wiesz, że dostanie dobrą ilość towarów. Możesz także upewnić się, że łączy się on na przykład z drogą miejską za pomocą kalkulatora <code>AIRoad.GetNeighbourRoadCount()</code> .