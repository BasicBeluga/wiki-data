[[Translation:en/Development/Script/Save and Load]]


<!--{{NoAI}}-->{{pl/Development/Script/NoAI}}

== Zapis ==
Jeśli utworzysz funkcję <code>Save()</code> w swojej sztucznej inteligencji, możesz zapisać niektóre dane w grze. Funkcja powinna zwrócić tabelę z informacjami, które chcesz zapisać. Możesz tylko przechowywać:
* integers
* strings
* arrays (max. 25 levels deep)
* tables (max. 25 levels deep)
* booleans
* nulls

Instancji zajęć nie można zapisać. Należy pamiętać, że obejmuje to AIList, więc jeśli chcesz przechowywać AIList, musisz przekonwertować go na tablicę lub tabelę podczas zapisywania i przekonwertować z powrotem przy ładowaniu.

As soon as the user saves the game, the <code>Save()</code> function of your AI is called. This happens while your AI is still active doing whatever you made it do. For example, in the middle of a pathfinding, or maybe when you are changing an internal array. The point here is, that your AI won't notice it, besides the fact that the <code>Save()</code> is called for a moment. When you return from that function, your AI continues like nothing happened. Warning: if you change a variable that you also store, and want to make absolutely sure no race-conditions happen, do it right after a <code>Sleep()</code>. The chances of the Squirrel fair-scheduler kicking in just after a <code>Sleep()</code> are very slim, so you should be relatively safe.

'''Note:''' No other information is saved, so for example all pending events are lost as soon as the game is loaded. To circumvent this you can store all events (converted to allowed types) in the savegame yourself. However, the game will continue normally after the <code>Save()</code> function is called, so you also need to handle those events.

== Load ==
If a savegame with an AI in it is loaded, OpenTTD tries the following. As soon as one step succeeds, the sequence is stopped:
* Try to load the exact same version of the same AI.
* Try to load the latest version of the same AI that supports loading data from the saved version. (version of saved AI >= return value of MinVersionToLoad)
* Load the latest version of the same AI.
* Load a random AI.
* Load the dummy AI.

First the constructor of your AI is called (to create an instance of the AI). Then your <code>Load(version, data)</code> function is called with the version number of the AI used to save and the saved data itself, and finally the <code>Start()</code> function is called to start the program. If an AI didn't save any data, the <code>Load()</code> function is not called. (The constructor is called to make an instance, and then <code>Start()</code> is called.)

== Jakie dane zapisać? ==
Oczywiście, jakie dane dokładnie zapiszesz, zależy od ciebie, ale zasadniczo nie powinieneś zapisywać niczego, co można łatwo wykryć, czytając mapę ponownie. Możesz więc zapisać mapowanie stacji ciężarówek do przemysłu, ale przechowywanie tylko listy stacji jest bezużyteczne.

== What you can't do in your Save() and Load() function ==
Both the Save() and Load function() are called from within the main thread. This means that it is not possible to execute any command that builds / removes / changes something in the game. You can execute some API functions, but only those that fetch data. Please try to minimize the code in Save() and Load(), as the user has to wait for those functions everytime they save and load a game.

== Handling of save versions ==
When a game is saved, the name and version of each AI is saved. When OpenTTD loads a game it tries to find a version of the same AI that can load the game state from the version of the AI that was used in the save. By declaring <code>MinVersionToLoad()</code> in your info.nut and make it return the minimum version of your AI from which it can load the data.

Dodatkowo istnieje argument wersji Load(), który informuje funkcję load, która wersja twojej AI została użyta do zapisania stanu gry.

== Przykład Save() / Load() kod ==
 /* info.nut */
 class testai extends AIInfo
 {
   /* ... */
 
   function GetVersion() { return 3; }
 
   /* Accept to load games saved by version >= 2 of this AI */
   function MinVersionToLoad() { return 2; } 
 
   /* ... */
 }

 /* main.nut */
 class testai extends AIController
 {
   constructor()
   {
     counter = 0;
   }
 
   counter = null;
 };
 
 function testai::Save()
 {
   local table = {counter_value = this.counter};
   return table;
 }
 
 function testai::Load(version, data)
 {
   if (data.rawin("counter_value")) {
     this.counter = data.rawget("counter_value");
   }
 }
 
 function testai::Start()
 {
   while(true) {
     AILog.Info("Tick " + this.counter);
     this.Sleep(70);
     this.counter++;
   }
 }


== Identyfikatory zapisu ==
Ponieważ różne newgrfs mogą zmieniać wiele różnych typów identyfikatorów używanych w grze, oto lista typów identyfikatorów, którym możesz/nie możesz ufać, że są takie same, gdy gra jest zapisana.

{| border="1"
|-
! ID type
! Meaning
! Store in savegames
! Hardcode into AIs
! Note
|-
| BridgeID
| Type of bridge (ex. tubular)
| [0]
| No
| Use the AIBridge::* function to find suitable bridge type.
|-
| CargoID
| Type of cargo
| [0]
| No
| You can filter the AICargoList using AICargo::CargoClass (ex. CC_PASSENGERS) or AICargo::TownEffect (ex. TE_PASSENGERS) to get the passenger cargoID
|-
| EngineID
| Engine type
| [0]
| No
| Use the AIEngine::* functions to find an engineID that suits your need.
|-
| GroupID
| Vehicle group
| Yes
| ---
| 
|-
| IndustryID
| Specific industry somewhere on the map
| Yes
| ---
| 
|-
| IndustryType
| Type of industry, ex. coal mine
| [0]
| No
| Use AIIndustryList_CargoAccepting and AIIndustryList_CargoProducing to find matching pairs.
|-
| SignID
| A sign somewhere on the map
| yes
| ---
| 
|-
| StationID
| Specific station somewhere on the map
| Yes
| ---
| 
|-
| SubsidyID
| subsidy
| Yes (but is reused when subsidy expires)
| ---
| 
|-
| TileIndex
| A tile somewhere on map
| Yes
| ---
| 
|-
| TownID
| A town somewhere on the map
| Yes
| ---
| 
|-
| VehicleID
| Vehicle
| yes
| ---
| 
|-
| WaypointID
| Waypoint
| somewhat
| ---
| When upgrading savegames from before r16909, so in effect from 0.7.x to 1.0.x or later, the IDs will change if there are stations in the game
|}

[0] Powinny być one bezpieczne do przechowywania, ale mogą ulec zmianie po zmianie konfiguracji newgrf. Zwykle użytkownicy nie powinni tego zmieniać, więc jeśli Twoja AI ulegnie awarii z powodu jednej z tych zmian, obwiniaj użytkownika. Zauważ, że konfiguracja newgrf może się również zmienić podczas gry, aw takim przypadku nic nie możesz zrobić, jeśli zmieni się jeden z tych identyfikatorów. (Możesz ponownie obliczyć identyfikatory za każdym razem, gdy ich używasz, ale to bardzo niepraktyczne).